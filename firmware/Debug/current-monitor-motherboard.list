
current-monitor-motherboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bdc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ddc  08008ddc  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de4  08008de4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de4  08008de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c0  20000180  08008f6c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002240  08008f6c  00022240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e27a  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004217  00000000  00000000  0003e42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00042648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  00043a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b09c  00000000  00000000  00044cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9d0  00000000  00000000  0005fd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090eaa  00000000  00000000  0007a734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b5de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000528c  00000000  00000000  0010b634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000180 	.word	0x20000180
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008d58 	.word	0x08008d58

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000184 	.word	0x20000184
 80001d0:	08008d58 	.word	0x08008d58

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb44 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f80e 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8fa 	bl	80006d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f874 	bl	80005c8 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80004e0:	f000 f8a0 	bl	8000624 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8be 	bl	8000664 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f007 ff16 	bl	8008318 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80004ec:	f006 f8ba 	bl	8006664 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x24>
	...

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f008 fc20 	bl	8008d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <SystemClock_Config+0xcc>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000540:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <SystemClock_Config+0xd0>)
 8000542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000568:	2304      	movs	r3, #4
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800056c:	23a8      	movs	r3, #168	; 0xa8
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000570:	2304      	movs	r3, #4
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000574:	2307      	movs	r3, #7
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f002 f913 	bl	80027a8 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000588:	f000 f952 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2102      	movs	r1, #2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fb75 	bl	8002c98 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b4:	f000 f93c 	bl	8000830 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3750      	adds	r7, #80	; 0x50
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_I2C1_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_I2C1_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_I2C1_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_I2C1_Init+0x50>)
 8000606:	f000 fe07 	bl	8001218 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 f90e 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200003cc 	.word	0x200003cc
 800061c:	40005400 	.word	0x40005400
 8000620:	000186a0 	.word	0x000186a0

08000624 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_SDIO_SD_Init+0x38>)
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <MX_SDIO_SD_Init+0x3c>)
 800062c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_SDIO_SD_Init+0x38>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_SDIO_SD_Init+0x38>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_SDIO_SD_Init+0x38>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_SDIO_SD_Init+0x38>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <MX_SDIO_SD_Init+0x38>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <MX_SDIO_SD_Init+0x38>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	20000420 	.word	0x20000420
 8000660:	40012c00 	.word	0x40012c00

08000664 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_SPI1_Init+0x64>)
 800066a:	4a18      	ldr	r2, [pc, #96]	; (80006cc <MX_SPI1_Init+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_SPI1_Init+0x64>)
 8000670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_SPI1_Init+0x64>)
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_SPI1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_SPI1_Init+0x64>)
 80006b0:	220a      	movs	r2, #10
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_SPI1_Init+0x64>)
 80006b6:	f003 fe5e 	bl	8004376 <HAL_SPI_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006c0:	f000 f8b6 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200004a4 	.word	0x200004a4
 80006cc:	40013000 	.word	0x40013000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <MX_GPIO_Init+0x150>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a4c      	ldr	r2, [pc, #304]	; (8000820 <MX_GPIO_Init+0x150>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b4a      	ldr	r3, [pc, #296]	; (8000820 <MX_GPIO_Init+0x150>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b46      	ldr	r3, [pc, #280]	; (8000820 <MX_GPIO_Init+0x150>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a45      	ldr	r2, [pc, #276]	; (8000820 <MX_GPIO_Init+0x150>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b43      	ldr	r3, [pc, #268]	; (8000820 <MX_GPIO_Init+0x150>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b3f      	ldr	r3, [pc, #252]	; (8000820 <MX_GPIO_Init+0x150>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a3e      	ldr	r2, [pc, #248]	; (8000820 <MX_GPIO_Init+0x150>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <MX_GPIO_Init+0x150>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b38      	ldr	r3, [pc, #224]	; (8000820 <MX_GPIO_Init+0x150>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a37      	ldr	r2, [pc, #220]	; (8000820 <MX_GPIO_Init+0x150>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <MX_GPIO_Init+0x150>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <MX_GPIO_Init+0x150>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a30      	ldr	r2, [pc, #192]	; (8000820 <MX_GPIO_Init+0x150>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <MX_GPIO_Init+0x150>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PATH_0_EN_Pin|PATH_1_EN_Pin|PATH_2_EN_Pin|PATH_3_EN_Pin
 8000772:	2200      	movs	r2, #0
 8000774:	211f      	movs	r1, #31
 8000776:	482b      	ldr	r0, [pc, #172]	; (8000824 <MX_GPIO_Init+0x154>)
 8000778:	f000 fd34 	bl	80011e4 <HAL_GPIO_WritePin>
                          |PATH_4_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|ADC_INT_Pin|ADC_CONVST_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	21d0      	movs	r1, #208	; 0xd0
 8000780:	4829      	ldr	r0, [pc, #164]	; (8000828 <MX_GPIO_Init+0x158>)
 8000782:	f000 fd2f 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LED_1_GPIO_Port, SIGNAL_LED_1_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2120      	movs	r1, #32
 800078a:	4827      	ldr	r0, [pc, #156]	; (8000828 <MX_GPIO_Init+0x158>)
 800078c:	f000 fd2a 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIGNAL_LED_2_Pin|SIGNAL_LED_3_Pin|SIGNAL_LED_4_Pin|SIGNAL_LED_5_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f240 4107 	movw	r1, #1031	; 0x407
 8000796:	4825      	ldr	r0, [pc, #148]	; (800082c <MX_GPIO_Init+0x15c>)
 8000798:	f000 fd24 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_LOAD_1_Pin|TEST_LOAD_2_Pin|TEST_LOAD_3_Pin|TEST_LOAD_4_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007a2:	4822      	ldr	r0, [pc, #136]	; (800082c <MX_GPIO_Init+0x15c>)
 80007a4:	f000 fd1e 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PATH_0_EN_Pin PATH_1_EN_Pin PATH_2_EN_Pin PATH_3_EN_Pin
                           PATH_4_EN_Pin */
  GPIO_InitStruct.Pin = PATH_0_EN_Pin|PATH_1_EN_Pin|PATH_2_EN_Pin|PATH_3_EN_Pin
 80007a8:	231f      	movs	r3, #31
 80007aa:	617b      	str	r3, [r7, #20]
                          |PATH_4_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	4819      	ldr	r0, [pc, #100]	; (8000824 <MX_GPIO_Init+0x154>)
 80007c0:	f000 fb74 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CS_Pin SIGNAL_LED_1_Pin ADC_INT_Pin ADC_CONVST_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|SIGNAL_LED_1_Pin|ADC_INT_Pin|ADC_CONVST_Pin;
 80007c4:	23f0      	movs	r3, #240	; 0xf0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4813      	ldr	r0, [pc, #76]	; (8000828 <MX_GPIO_Init+0x158>)
 80007dc:	f000 fb66 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_LED_2_Pin SIGNAL_LED_3_Pin SIGNAL_LED_4_Pin SIGNAL_LED_5_Pin
                           TEST_LOAD_1_Pin TEST_LOAD_2_Pin TEST_LOAD_3_Pin TEST_LOAD_4_Pin */
  GPIO_InitStruct.Pin = SIGNAL_LED_2_Pin|SIGNAL_LED_3_Pin|SIGNAL_LED_4_Pin|SIGNAL_LED_5_Pin
 80007e0:	f24f 4307 	movw	r3, #62471	; 0xf407
 80007e4:	617b      	str	r3, [r7, #20]
                          |TEST_LOAD_1_Pin|TEST_LOAD_2_Pin|TEST_LOAD_3_Pin|TEST_LOAD_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_GPIO_Init+0x15c>)
 80007fa:	f000 fb57 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BTN_1_Pin USER_BTN_2_Pin USER_BTN_3_Pin SD_CD_Pin */
  GPIO_InitStruct.Pin = USER_BTN_1_Pin|USER_BTN_2_Pin|USER_BTN_3_Pin|SD_CD_Pin;
 80007fe:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_GPIO_Init+0x154>)
 8000814:	f000 fb4a 	bl	8000eac <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	40020800 	.word	0x40020800
 800082c:	40020400 	.word	0x40020400

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_I2C_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ca:	23c0      	movs	r3, #192	; 0xc0
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008da:	2304      	movs	r3, #4
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <HAL_I2C_MspInit+0x8c>)
 80008e6:	f000 fae1 	bl	8000eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_I2C_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40005400 	.word	0x40005400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400

0800091c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a28      	ldr	r2, [pc, #160]	; (80009dc <HAL_SD_MspInit+0xc0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d14a      	bne.n	80009d4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <HAL_SD_MspInit+0xc4>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <HAL_SD_MspInit+0xc4>)
 8000948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <HAL_SD_MspInit+0xc4>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <HAL_SD_MspInit+0xc4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <HAL_SD_MspInit+0xc4>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_SD_MspInit+0xc4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_SD_MspInit+0xc4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <HAL_SD_MspInit+0xc4>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_SD_MspInit+0xc4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000992:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000996:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009a4:	230c      	movs	r3, #12
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <HAL_SD_MspInit+0xc8>)
 80009b0:	f000 fa7c 	bl	8000eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b4:	2304      	movs	r3, #4
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009c4:	230c      	movs	r3, #12
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <HAL_SD_MspInit+0xcc>)
 80009d0:	f000 fa6c 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40012c00 	.word	0x40012c00
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020c00 	.word	0x40020c00

080009ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <HAL_SPI_MspInit+0x84>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12b      	bne.n	8000a66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_SPI_MspInit+0x88>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_SPI_MspInit+0x88>)
 8000a18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_SPI_MspInit+0x88>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_SPI_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_SPI_MspInit+0x88>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_SPI_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a46:	23e0      	movs	r3, #224	; 0xe0
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a56:	2305      	movs	r3, #5
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_SPI_MspInit+0x8c>)
 8000a62:	f000 fa23 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40013000 	.word	0x40013000
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f89a 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <OTG_FS_IRQHandler+0x10>)
 8000ad6:	f000 fe33 	bl	8001740 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20001e38 	.word	0x20001e38

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f008 f8e3 	bl	8008d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fcc7 	bl	80004cc <main>
  bx  lr    
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000b4c:	08008dec 	.word	0x08008dec
  ldr r2, =_sbss
 8000b50:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000b54:	20002240 	.word	0x20002240

08000b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <HAL_Init+0x40>)
 8000b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_Init+0x40>)
 8000b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_Init+0x40>)
 8000b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f94f 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f000 f808 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff fe54 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023c00 	.word	0x40023c00

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x54>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x58>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f967 	bl	8000e92 <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 f92f 	bl	8000e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_InitTick+0x5c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	200004fc 	.word	0x200004fc

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200004fc 	.word	0x200004fc

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff ffee 	bl	8000c28 <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_Delay+0x44>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c66:	bf00      	nop
 8000c68:	f7ff ffde 	bl	8000c28 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff29 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff3e 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff31 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa2 	bl	8000de4 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	e159      	b.n	800117c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 8148 	bne.w	8001176 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d005      	beq.n	8000efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d130      	bne.n	8000f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	f003 0201 	and.w	r2, r3, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d017      	beq.n	8000f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d123      	bne.n	8000ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	69b9      	ldr	r1, [r7, #24]
 8000fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0203 	and.w	r2, r3, #3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80a2 	beq.w	8001176 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a56      	ldr	r2, [pc, #344]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b54      	ldr	r3, [pc, #336]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104e:	4a52      	ldr	r2, [pc, #328]	; (8001198 <HAL_GPIO_Init+0x2ec>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a49      	ldr	r2, [pc, #292]	; (800119c <HAL_GPIO_Init+0x2f0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d019      	beq.n	80010ae <HAL_GPIO_Init+0x202>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a48      	ldr	r2, [pc, #288]	; (80011a0 <HAL_GPIO_Init+0x2f4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x1fe>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a47      	ldr	r2, [pc, #284]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x1fa>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a46      	ldr	r2, [pc, #280]	; (80011a8 <HAL_GPIO_Init+0x2fc>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x1f6>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a45      	ldr	r2, [pc, #276]	; (80011ac <HAL_GPIO_Init+0x300>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x1f2>
 800109a:	2304      	movs	r3, #4
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 800109e:	2307      	movs	r3, #7
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x2ec>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HAL_GPIO_Init+0x304>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <HAL_GPIO_Init+0x304>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_GPIO_Init+0x304>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111c:	4a24      	ldr	r2, [pc, #144]	; (80011b0 <HAL_GPIO_Init+0x304>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_GPIO_Init+0x304>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f aea2 	bls.w	8000ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40013c00 	.word	0x40013c00

080011b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e001      	b.n	80011d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001200:	e003      	b.n	800120a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	041a      	lsls	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e12b      	b.n	8001482 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fb24 	bl	800088c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2224      	movs	r2, #36	; 0x24
 8001248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800126a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800127a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800127c:	f001 fee0 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8001280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a81      	ldr	r2, [pc, #516]	; (800148c <HAL_I2C_Init+0x274>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d807      	bhi.n	800129c <HAL_I2C_Init+0x84>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4a80      	ldr	r2, [pc, #512]	; (8001490 <HAL_I2C_Init+0x278>)
 8001290:	4293      	cmp	r3, r2
 8001292:	bf94      	ite	ls
 8001294:	2301      	movls	r3, #1
 8001296:	2300      	movhi	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	e006      	b.n	80012aa <HAL_I2C_Init+0x92>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a7d      	ldr	r2, [pc, #500]	; (8001494 <HAL_I2C_Init+0x27c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	bf94      	ite	ls
 80012a4:	2301      	movls	r3, #1
 80012a6:	2300      	movhi	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0e7      	b.n	8001482 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4a78      	ldr	r2, [pc, #480]	; (8001498 <HAL_I2C_Init+0x280>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a6a      	ldr	r2, [pc, #424]	; (800148c <HAL_I2C_Init+0x274>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d802      	bhi.n	80012ec <HAL_I2C_Init+0xd4>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	3301      	adds	r3, #1
 80012ea:	e009      	b.n	8001300 <HAL_I2C_Init+0xe8>
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	4a69      	ldr	r2, [pc, #420]	; (800149c <HAL_I2C_Init+0x284>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	099b      	lsrs	r3, r3, #6
 80012fe:	3301      	adds	r3, #1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	430b      	orrs	r3, r1
 8001306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001312:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	495c      	ldr	r1, [pc, #368]	; (800148c <HAL_I2C_Init+0x274>)
 800131c:	428b      	cmp	r3, r1
 800131e:	d819      	bhi.n	8001354 <HAL_I2C_Init+0x13c>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1e59      	subs	r1, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fbb1 f3f3 	udiv	r3, r1, r3
 800132e:	1c59      	adds	r1, r3, #1
 8001330:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001334:	400b      	ands	r3, r1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00a      	beq.n	8001350 <HAL_I2C_Init+0x138>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1e59      	subs	r1, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fbb1 f3f3 	udiv	r3, r1, r3
 8001348:	3301      	adds	r3, #1
 800134a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134e:	e051      	b.n	80013f4 <HAL_I2C_Init+0x1dc>
 8001350:	2304      	movs	r3, #4
 8001352:	e04f      	b.n	80013f4 <HAL_I2C_Init+0x1dc>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d111      	bne.n	8001380 <HAL_I2C_Init+0x168>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1e58      	subs	r0, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	440b      	add	r3, r1
 800136a:	fbb0 f3f3 	udiv	r3, r0, r3
 800136e:	3301      	adds	r3, #1
 8001370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	e012      	b.n	80013a6 <HAL_I2C_Init+0x18e>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1e58      	subs	r0, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	0099      	lsls	r1, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	fbb0 f3f3 	udiv	r3, r0, r3
 8001396:	3301      	adds	r3, #1
 8001398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800139c:	2b00      	cmp	r3, #0
 800139e:	bf0c      	ite	eq
 80013a0:	2301      	moveq	r3, #1
 80013a2:	2300      	movne	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_I2C_Init+0x196>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e022      	b.n	80013f4 <HAL_I2C_Init+0x1dc>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10e      	bne.n	80013d4 <HAL_I2C_Init+0x1bc>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1e58      	subs	r0, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6859      	ldr	r1, [r3, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	440b      	add	r3, r1
 80013c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d2:	e00f      	b.n	80013f4 <HAL_I2C_Init+0x1dc>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1e58      	subs	r0, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	0099      	lsls	r1, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	6809      	ldr	r1, [r1, #0]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6911      	ldr	r1, [r2, #16]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68d2      	ldr	r2, [r2, #12]
 800142e:	4311      	orrs	r1, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	430b      	orrs	r3, r1
 8001436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2220      	movs	r2, #32
 800146e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	000186a0 	.word	0x000186a0
 8001490:	001e847f 	.word	0x001e847f
 8001494:	003d08ff 	.word	0x003d08ff
 8001498:	431bde83 	.word	0x431bde83
 800149c:	10624dd3 	.word	0x10624dd3

080014a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	b08f      	sub	sp, #60	; 0x3c
 80014a4:	af0a      	add	r7, sp, #40	; 0x28
 80014a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e10f      	b.n	80016d2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d106      	bne.n	80014d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f007 f903 	bl	80086d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2203      	movs	r2, #3
 80014d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 fe52 	bl	800519a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	687e      	ldr	r6, [r7, #4]
 80014fe:	466d      	mov	r5, sp
 8001500:	f106 0410 	add.w	r4, r6, #16
 8001504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001510:	e885 0003 	stmia.w	r5, {r0, r1}
 8001514:	1d33      	adds	r3, r6, #4
 8001516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f003 fd29 	bl	8004f70 <USB_CoreInit>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2202      	movs	r2, #2
 8001528:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0d0      	b.n	80016d2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fe40 	bl	80051bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e04a      	b.n	80015d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	1a9b      	subs	r3, r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	333d      	adds	r3, #61	; 0x3d
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	333c      	adds	r3, #60	; 0x3c
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	b298      	uxth	r0, r3
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	3342      	adds	r3, #66	; 0x42
 800157e:	4602      	mov	r2, r0
 8001580:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	333f      	adds	r3, #63	; 0x3f
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	3344      	adds	r3, #68	; 0x44
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3348      	adds	r3, #72	; 0x48
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3350      	adds	r3, #80	; 0x50
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	3301      	adds	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3af      	bcc.n	8001542 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	e044      	b.n	8001672 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	3301      	adds	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	d3b5      	bcc.n	80015e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	687e      	ldr	r6, [r7, #4]
 8001684:	466d      	mov	r5, sp
 8001686:	f106 0410 	add.w	r4, r6, #16
 800168a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001696:	e885 0003 	stmia.w	r5, {r0, r1}
 800169a:	1d33      	adds	r3, r6, #4
 800169c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800169e:	6838      	ldr	r0, [r7, #0]
 80016a0:	f003 fdd8 	bl	8005254 <USB_DevInit>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00d      	b.n	80016d2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f004 fe54 	bl	8006378 <USB_DevDisconnect>

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_PCD_Start+0x1c>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e020      	b.n	8001738 <HAL_PCD_Start+0x5e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	2b01      	cmp	r3, #1
 8001704:	d109      	bne.n	800171a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800170a:	2b01      	cmp	r3, #1
 800170c:	d005      	beq.n	800171a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fd2a 	bl	8005178 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f004 fe04 	bl	8006336 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b08d      	sub	sp, #52	; 0x34
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f004 fec2 	bl	80064e0 <USB_GetMode>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	f040 839d 	bne.w	8001e9e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f004 fe26 	bl	80063ba <USB_ReadInterrupts>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8393 	beq.w	8001e9c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fe1d 	bl	80063ba <USB_ReadInterrupts>
 8001780:	4603      	mov	r3, r0
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b02      	cmp	r3, #2
 8001788:	d107      	bne.n	800179a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f002 0202 	and.w	r2, r2, #2
 8001798:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 fe0b 	bl	80063ba <USB_ReadInterrupts>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d161      	bne.n	8001872 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699a      	ldr	r2, [r3, #24]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0210 	bic.w	r2, r2, #16
 80017bc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	f003 020f 	and.w	r2, r3, #15
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	3304      	adds	r3, #4
 80017dc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	0c5b      	lsrs	r3, r3, #17
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d124      	bne.n	8001834 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d035      	beq.n	8001862 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001804:	b29b      	uxth	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	6a38      	ldr	r0, [r7, #32]
 800180a:	f004 fc42 	bl	8006092 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800181a:	441a      	add	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800182c:	441a      	add	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	619a      	str	r2, [r3, #24]
 8001832:	e016      	b.n	8001862 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	0c5b      	lsrs	r3, r3, #17
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	2b06      	cmp	r3, #6
 800183e:	d110      	bne.n	8001862 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001846:	2208      	movs	r2, #8
 8001848:	4619      	mov	r1, r3
 800184a:	6a38      	ldr	r0, [r7, #32]
 800184c:	f004 fc21 	bl	8006092 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	699a      	ldr	r2, [r3, #24]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800185c:	441a      	add	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699a      	ldr	r2, [r3, #24]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0210 	orr.w	r2, r2, #16
 8001870:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f004 fd9f 	bl	80063ba <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001882:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001886:	d16e      	bne.n	8001966 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f004 fda5 	bl	80063e0 <USB_ReadDevAllOutEpInterrupt>
 8001896:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001898:	e062      	b.n	8001960 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d057      	beq.n	8001954 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f004 fdca 	bl	8006448 <USB_ReadDevOutEPInterrupt>
 80018b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00c      	beq.n	80018da <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	015a      	lsls	r2, r3, #5
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018cc:	461a      	mov	r2, r3
 80018ce:	2301      	movs	r3, #1
 80018d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fdb1 	bl	800243c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00c      	beq.n	80018fe <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f0:	461a      	mov	r2, r3
 80018f2:	2308      	movs	r3, #8
 80018f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 feab 	bl	8002654 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001914:	461a      	mov	r2, r3
 8001916:	2310      	movs	r3, #16
 8001918:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	4413      	add	r3, r2
 800192c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001930:	461a      	mov	r2, r3
 8001932:	2320      	movs	r3, #32
 8001934:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d009      	beq.n	8001954 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	4413      	add	r3, r2
 8001948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800194c:	461a      	mov	r2, r3
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	3301      	adds	r3, #1
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001962:	2b00      	cmp	r3, #0
 8001964:	d199      	bne.n	800189a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f004 fd25 	bl	80063ba <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001976:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800197a:	f040 80c0 	bne.w	8001afe <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f004 fd46 	bl	8006414 <USB_ReadDevAllInEpInterrupt>
 8001988:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800198e:	e0b2      	b.n	8001af6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80a7 	beq.w	8001aea <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f004 fd6c 	bl	8006484 <USB_ReadDevInEPInterrupt>
 80019ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d057      	beq.n	8001a68 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	2201      	movs	r2, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69f9      	ldr	r1, [r7, #28]
 80019d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019d8:	4013      	ands	r3, r2
 80019da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	015a      	lsls	r2, r3, #5
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e8:	461a      	mov	r2, r3
 80019ea:	2301      	movs	r3, #1
 80019ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d132      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	3348      	adds	r3, #72	; 0x48
 8001a06:	6819      	ldr	r1, [r3, #0]
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4403      	add	r3, r0
 8001a16:	3344      	adds	r3, #68	; 0x44
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4419      	add	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4403      	add	r3, r0
 8001a2a:	3348      	adds	r3, #72	; 0x48
 8001a2c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d113      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x31c>
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3350      	adds	r3, #80	; 0x50
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a54:	461a      	mov	r2, r3
 8001a56:	2101      	movs	r1, #1
 8001a58:	f004 fd74 	bl	8006544 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4619      	mov	r1, r3
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f006 feb9 	bl	80087da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2308      	movs	r3, #8
 8001a82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d008      	beq.n	8001aa0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2340      	movs	r3, #64	; 0x40
 8001aba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fc1b 	bl	8002320 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	3301      	adds	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f47f af49 	bne.w	8001990 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f004 fc59 	bl	80063ba <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b12:	d122      	bne.n	8001b5a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d108      	bne.n	8001b44 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 fe27 	bl	8002790 <HAL_PCDEx_LPM_Callback>
 8001b42:	e002      	b.n	8001b4a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f006 febf 	bl	80088c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 fc2b 	bl	80063ba <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b6e:	d112      	bne.n	8001b96 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d102      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f006 fe7b 	bl	800887c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695a      	ldr	r2, [r3, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b94:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 fc0d 	bl	80063ba <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001baa:	f040 80c7 	bne.w	8001d3c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 fca7 	bl	800551c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd2:	e056      	b.n	8001c82 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be0:	461a      	mov	r2, r3
 8001be2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001be6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bea:	015a      	lsls	r2, r3, #5
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf8:	0151      	lsls	r1, r2, #5
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	440a      	add	r2, r1
 8001bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c06:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c18:	0151      	lsls	r1, r2, #5
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	440a      	add	r2, r1
 8001c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c34:	461a      	mov	r2, r3
 8001c36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4c:	0151      	lsls	r1, r2, #5
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	440a      	add	r2, r1
 8001c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5e:	015a      	lsls	r2, r3, #5
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	4413      	add	r3, r2
 8001c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6c:	0151      	lsls	r1, r2, #5
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	440a      	add	r2, r1
 8001c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7e:	3301      	adds	r3, #1
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3a3      	bcc.n	8001bd4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d016      	beq.n	8001cd6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb8:	f043 030b 	orr.w	r3, r3, #11
 8001cbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cce:	f043 030b 	orr.w	r3, r3, #11
 8001cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd4:	e015      	b.n	8001d02 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cfc:	f043 030b 	orr.w	r3, r3, #11
 8001d00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d26:	461a      	mov	r2, r3
 8001d28:	f004 fc0c 	bl	8006544 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f004 fb3a 	bl	80063ba <USB_ReadInterrupts>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d50:	d124      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fbd0 	bl	80064fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fc38 	bl	80055d6 <USB_GetDevSpeed>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681c      	ldr	r4, [r3, #0]
 8001d72:	f001 f959 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8001d76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4620      	mov	r0, r4
 8001d82:	f003 f957 	bl	8005034 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f006 fd4f 	bl	800882a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 fb0a 	bl	80063ba <USB_ReadInterrupts>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d10a      	bne.n	8001dc6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f006 fd2c 	bl	800880e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f002 0208 	and.w	r2, r2, #8
 8001dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 faf5 	bl	80063ba <USB_ReadInterrupts>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dda:	d10f      	bne.n	8001dfc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f006 fd8e 	bl	8008908 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 fada 	bl	80063ba <USB_ReadInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e10:	d10f      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f006 fd61 	bl	80088e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fabf 	bl	80063ba <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e46:	d10a      	bne.n	8001e5e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f006 fd6f 	bl	800892c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 faa9 	bl	80063ba <USB_ReadInterrupts>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d115      	bne.n	8001e9e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f006 fd5f 	bl	8008948 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	e000      	b.n	8001e9e <HAL_PCD_IRQHandler+0x75e>
      return;
 8001e9c:	bf00      	nop
    }
  }
}
 8001e9e:	3734      	adds	r7, #52	; 0x34
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}

08001ea4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_PCD_SetAddress+0x1a>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e013      	b.n	8001ee6 <HAL_PCD_SetAddress+0x42>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 fa07 	bl	80062ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	4608      	mov	r0, r1
 8001ef8:	4611      	mov	r1, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	70fb      	strb	r3, [r7, #3]
 8001f00:	460b      	mov	r3, r1
 8001f02:	803b      	strh	r3, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da0f      	bge.n	8001f34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 020f 	and.w	r2, r3, #15
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	3338      	adds	r3, #56	; 0x38
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	705a      	strb	r2, [r3, #1]
 8001f32:	e00f      	b.n	8001f54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 020f 	and.w	r2, r3, #15
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f60:	883a      	ldrh	r2, [r7, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	78ba      	ldrb	r2, [r7, #2]
 8001f6a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	785b      	ldrb	r3, [r3, #1]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f7e:	78bb      	ldrb	r3, [r7, #2]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d102      	bne.n	8001f8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_PCD_EP_Open+0xaa>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e00e      	b.n	8001fb6 <HAL_PCD_EP_Open+0xc8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68f9      	ldr	r1, [r7, #12]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 fb3a 	bl	8005620 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	da0f      	bge.n	8001ff2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	f003 020f 	and.w	r2, r3, #15
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	3338      	adds	r3, #56	; 0x38
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	705a      	strb	r2, [r3, #1]
 8001ff0:	e00f      	b.n	8002012 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 020f 	and.w	r2, r3, #15
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	3304      	adds	r3, #4
 800200a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	b2da      	uxtb	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_PCD_EP_Close+0x6e>
 8002028:	2302      	movs	r3, #2
 800202a:	e00e      	b.n	800204a <HAL_PCD_EP_Close+0x8c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68f9      	ldr	r1, [r7, #12]
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fb78 	bl	8005730 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	460b      	mov	r3, r1
 8002060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	f003 020f 	and.w	r2, r3, #15
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	3304      	adds	r3, #4
 800207a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2200      	movs	r2, #0
 8002092:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	b2da      	uxtb	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d102      	bne.n	80020ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ae:	7afb      	ldrb	r3, [r7, #11]
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	6979      	ldr	r1, [r7, #20]
 80020c6:	f003 fe53 	bl	8005d70 <USB_EP0StartXfer>
 80020ca:	e008      	b.n	80020de <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	6979      	ldr	r1, [r7, #20]
 80020da:	f003 fc05 	bl	80058e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 020f 	and.w	r2, r3, #15
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	460b      	mov	r3, r1
 8002126:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002128:	7afb      	ldrb	r3, [r7, #11]
 800212a:	f003 020f 	and.w	r2, r3, #15
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	3338      	adds	r3, #56	; 0x38
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2201      	movs	r2, #1
 8002156:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002158:	7afb      	ldrb	r3, [r7, #11]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	b2da      	uxtb	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d102      	bne.n	8002172 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	6979      	ldr	r1, [r7, #20]
 800218a:	f003 fdf1 	bl	8005d70 <USB_EP0StartXfer>
 800218e:	e008      	b.n	80021a2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	6979      	ldr	r1, [r7, #20]
 800219e:	f003 fba3 	bl	80058e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 020f 	and.w	r2, r3, #15
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d901      	bls.n	80021ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e050      	b.n	800226c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da0f      	bge.n	80021f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	f003 020f 	and.w	r2, r3, #15
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	3338      	adds	r3, #56	; 0x38
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	3304      	adds	r3, #4
 80021e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	705a      	strb	r2, [r3, #1]
 80021f0:	e00d      	b.n	800220e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	3304      	adds	r3, #4
 8002206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	b2da      	uxtb	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_PCD_EP_SetStall+0x82>
 800222a:	2302      	movs	r3, #2
 800222c:	e01e      	b.n	800226c <HAL_PCD_EP_SetStall+0xc0>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 ff80 	bl	8006142 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	b2d9      	uxtb	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800225c:	461a      	mov	r2, r3
 800225e:	f004 f971 	bl	8006544 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	f003 020f 	and.w	r2, r3, #15
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	429a      	cmp	r2, r3
 800228c:	d901      	bls.n	8002292 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e042      	b.n	8002318 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da0f      	bge.n	80022ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 020f 	and.w	r2, r3, #15
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	3338      	adds	r3, #56	; 0x38
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	3304      	adds	r3, #4
 80022b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	705a      	strb	r2, [r3, #1]
 80022b8:	e00f      	b.n	80022da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	f003 020f 	and.w	r2, r3, #15
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	3304      	adds	r3, #4
 80022d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_PCD_EP_ClrStall+0x86>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e00e      	b.n	8002318 <HAL_PCD_EP_ClrStall+0xa4>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	4618      	mov	r0, r3
 800230a:	f003 ff88 	bl	800621e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af02      	add	r7, sp, #8
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3338      	adds	r3, #56	; 0x38
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	429a      	cmp	r2, r3
 8002352:	d901      	bls.n	8002358 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e06c      	b.n	8002432 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	429a      	cmp	r2, r3
 800236c:	d902      	bls.n	8002374 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	3303      	adds	r3, #3
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800237c:	e02b      	b.n	80023d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	429a      	cmp	r2, r3
 8002392:	d902      	bls.n	800239a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3303      	adds	r3, #3
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	68d9      	ldr	r1, [r3, #12]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	4603      	mov	r3, r0
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	f003 fe2c 	bl	8006016 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	441a      	add	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	441a      	add	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d809      	bhi.n	8002400 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d203      	bcs.n	8002400 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1be      	bne.n	800237e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	429a      	cmp	r2, r3
 800240a:	d811      	bhi.n	8002430 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	2201      	movs	r2, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	43db      	mvns	r3, r3
 8002426:	6939      	ldr	r1, [r7, #16]
 8002428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800242c:	4013      	ands	r3, r2
 800242e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	333c      	adds	r3, #60	; 0x3c
 8002454:	3304      	adds	r3, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b01      	cmp	r3, #1
 8002470:	f040 80a0 	bne.w	80025b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d015      	beq.n	80024aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a72      	ldr	r2, [pc, #456]	; (800264c <PCD_EP_OutXfrComplete_int+0x210>)
 8002482:	4293      	cmp	r3, r2
 8002484:	f240 80dd 	bls.w	8002642 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80d7 	beq.w	8002642 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a0:	461a      	mov	r2, r3
 80024a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a6:	6093      	str	r3, [r2, #8]
 80024a8:	e0cb      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d009      	beq.n	80024c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c0:	461a      	mov	r2, r3
 80024c2:	2320      	movs	r3, #32
 80024c4:	6093      	str	r3, [r2, #8]
 80024c6:	e0bc      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80b7 	bne.w	8002642 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a5d      	ldr	r2, [pc, #372]	; (800264c <PCD_EP_OutXfrComplete_int+0x210>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d90f      	bls.n	80024fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f2:	461a      	mov	r2, r3
 80024f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f8:	6093      	str	r3, [r2, #8]
 80024fa:	e0a2      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800250e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	0159      	lsls	r1, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	440b      	add	r3, r1
 8002518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002522:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4403      	add	r3, r0
 8002532:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002536:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4403      	add	r3, r0
 800255a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4419      	add	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4403      	add	r3, r0
 8002570:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002574:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d114      	bne.n	80025a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d108      	bne.n	80025a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800259e:	461a      	mov	r2, r3
 80025a0:	2101      	movs	r1, #1
 80025a2:	f003 ffcf 	bl	8006544 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4619      	mov	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f006 f8f9 	bl	80087a4 <HAL_PCD_DataOutStageCallback>
 80025b2:	e046      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a26      	ldr	r2, [pc, #152]	; (8002650 <PCD_EP_OutXfrComplete_int+0x214>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d124      	bne.n	8002606 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d2:	461a      	mov	r2, r3
 80025d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d8:	6093      	str	r3, [r2, #8]
 80025da:	e032      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f2:	461a      	mov	r2, r3
 80025f4:	2320      	movs	r3, #32
 80025f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4619      	mov	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f006 f8d0 	bl	80087a4 <HAL_PCD_DataOutStageCallback>
 8002604:	e01d      	b.n	8002642 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d114      	bne.n	8002636 <PCD_EP_OutXfrComplete_int+0x1fa>
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d108      	bne.n	8002636 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800262e:	461a      	mov	r2, r3
 8002630:	2100      	movs	r1, #0
 8002632:	f003 ff87 	bl	8006544 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4619      	mov	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f006 f8b1 	bl	80087a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	4f54300a 	.word	0x4f54300a
 8002650:	4f54310a 	.word	0x4f54310a

08002654 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	333c      	adds	r3, #60	; 0x3c
 800266c:	3304      	adds	r3, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a15      	ldr	r2, [pc, #84]	; (80026dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d90e      	bls.n	80026a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a0:	461a      	mov	r2, r3
 80026a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f006 f869 	bl	8008780 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <PCD_EP_OutSetupPacket_int+0x88>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d90c      	bls.n	80026d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026c8:	461a      	mov	r2, r3
 80026ca:	2101      	movs	r1, #1
 80026cc:	f003 ff3a 	bl	8006544 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	4f54300a 	.word	0x4f54300a

080026e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
 80026ec:	4613      	mov	r3, r2
 80026ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d107      	bne.n	800270e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026fe:	883b      	ldrh	r3, [r7, #0]
 8002700:	0419      	lsls	r1, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	430a      	orrs	r2, r1
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
 800270c:	e028      	b.n	8002760 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	4413      	add	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e00d      	b.n	800273e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	3340      	adds	r3, #64	; 0x40
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	4413      	add	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	3301      	adds	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	3b01      	subs	r3, #1
 8002744:	429a      	cmp	r2, r3
 8002746:	d3ec      	bcc.n	8002722 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002748:	883b      	ldrh	r3, [r7, #0]
 800274a:	0418      	lsls	r0, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	3b01      	subs	r3, #1
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	4302      	orrs	r2, r0
 8002758:	3340      	adds	r3, #64	; 0x40
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e264      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d075      	beq.n	80028b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c6:	4ba3      	ldr	r3, [pc, #652]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d00c      	beq.n	80027ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d2:	4ba0      	ldr	r3, [pc, #640]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d112      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b9d      	ldr	r3, [pc, #628]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ea:	d10b      	bne.n	8002804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	4b99      	ldr	r3, [pc, #612]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d05b      	beq.n	80028b0 <HAL_RCC_OscConfig+0x108>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d157      	bne.n	80028b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e23f      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0x74>
 800280e:	4b91      	ldr	r3, [pc, #580]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a90      	ldr	r2, [pc, #576]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x98>
 8002826:	4b8b      	ldr	r3, [pc, #556]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a8a      	ldr	r2, [pc, #552]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b88      	ldr	r3, [pc, #544]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a87      	ldr	r2, [pc, #540]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xb0>
 8002840:	4b84      	ldr	r3, [pc, #528]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a83      	ldr	r2, [pc, #524]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b81      	ldr	r3, [pc, #516]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a80      	ldr	r2, [pc, #512]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe f9e2 	bl	8000c28 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe f9de 	bl	8000c28 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e204      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xc0>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe f9ce 	bl	8000c28 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe f9ca 	bl	8000c28 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1f0      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b6c      	ldr	r3, [pc, #432]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0xe8>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028be:	4b65      	ldr	r3, [pc, #404]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b5f      	ldr	r3, [pc, #380]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b5c      	ldr	r3, [pc, #368]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1c4      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4952      	ldr	r1, [pc, #328]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <HAL_RCC_OscConfig+0x2b0>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe f983 	bl	8000c28 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe f97f 	bl	8000c28 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1a5      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4940      	ldr	r1, [pc, #256]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b3f      	ldr	r3, [pc, #252]	; (8002a58 <HAL_RCC_OscConfig+0x2b0>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe f962 	bl	8000c28 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe f95e 	bl	8000c28 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e184      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d030      	beq.n	80029f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d016      	beq.n	80029c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_RCC_OscConfig+0x2b4>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe f942 	bl	8000c28 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe f93e 	bl	8000c28 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e164      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x200>
 80029c6:	e015      	b.n	80029f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c8:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_OscConfig+0x2b4>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe f92b 	bl	8000c28 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d6:	f7fe f927 	bl	8000c28 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e14d      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80a0 	beq.w	8002b42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_OscConfig+0x2b8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d121      	bne.n	8002a82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_RCC_OscConfig+0x2b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <HAL_RCC_OscConfig+0x2b8>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe f8ed 	bl	8000c28 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	e011      	b.n	8002a76 <HAL_RCC_OscConfig+0x2ce>
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470000 	.word	0x42470000
 8002a5c:	42470e80 	.word	0x42470e80
 8002a60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a64:	f7fe f8e0 	bl	8000c28 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e106      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a76:	4b85      	ldr	r3, [pc, #532]	; (8002c8c <HAL_RCC_OscConfig+0x4e4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d106      	bne.n	8002a98 <HAL_RCC_OscConfig+0x2f0>
 8002a8a:	4b81      	ldr	r3, [pc, #516]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a80      	ldr	r2, [pc, #512]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	e01c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x32a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_OscConfig+0x312>
 8002aa0:	4b7b      	ldr	r3, [pc, #492]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	4a7a      	ldr	r2, [pc, #488]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002aac:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a77      	ldr	r2, [pc, #476]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab8:	e00b      	b.n	8002ad2 <HAL_RCC_OscConfig+0x32a>
 8002aba:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a74      	ldr	r2, [pc, #464]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac6:	4b72      	ldr	r3, [pc, #456]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4a71      	ldr	r2, [pc, #452]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d015      	beq.n	8002b06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fe f8a5 	bl	8000c28 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe f8a1 	bl	8000c28 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0c5      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ee      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x33a>
 8002b04:	e014      	b.n	8002b30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7fe f88f 	bl	8000c28 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe f88b 	bl	8000c28 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0af      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b24:	4b5a      	ldr	r3, [pc, #360]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ee      	bne.n	8002b0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d105      	bne.n	8002b42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 809b 	beq.w	8002c82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d05c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d141      	bne.n	8002be4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b4c      	ldr	r3, [pc, #304]	; (8002c94 <HAL_RCC_OscConfig+0x4ec>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe f85f 	bl	8000c28 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe f85b 	bl	8000c28 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e081      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b80:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	019b      	lsls	r3, r3, #6
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	061b      	lsls	r3, r3, #24
 8002bb0:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb6:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <HAL_RCC_OscConfig+0x4ec>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe f834 	bl	8000c28 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe f830 	bl	8000c28 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e056      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x41c>
 8002be2:	e04e      	b.n	8002c82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCC_OscConfig+0x4ec>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7fe f81d 	bl	8000c28 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7fe f819 	bl	8000c28 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e03f      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x44a>
 8002c10:	e037      	b.n	8002c82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e032      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <HAL_RCC_OscConfig+0x4e8>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d028      	beq.n	8002c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d121      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d11a      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c4e:	4013      	ands	r3, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d111      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	085b      	lsrs	r3, r3, #1
 8002c66:	3b01      	subs	r3, #1
 8002c68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470060 	.word	0x42470060

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0cc      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d90c      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b8      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cec:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	494d      	ldr	r1, [pc, #308]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d044      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d119      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e067      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4934      	ldr	r1, [pc, #208]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7fd ff4e 	bl	8000c28 <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fd ff4a 	bl	8000c28 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e04f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d20c      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e032      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4916      	ldr	r1, [pc, #88]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	490e      	ldr	r1, [pc, #56]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e1e:	f000 f821 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	490a      	ldr	r1, [pc, #40]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	5ccb      	ldrb	r3, [r1, r3]
 8002e32:	fa22 f303 	lsr.w	r3, r2, r3
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd feae 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023c00 	.word	0x40023c00
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08008db0 	.word	0x08008db0
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	2300      	movs	r3, #0
 8002e76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7c:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d00d      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	f200 80bd 	bhi.w	8003008 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x34>
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e96:	e0b7      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b61      	ldr	r3, [pc, #388]	; (8003020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e9a:	60bb      	str	r3, [r7, #8]
       break;
 8002e9c:	e0b7      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e9e:	4b61      	ldr	r3, [pc, #388]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ea0:	60bb      	str	r3, [r7, #8]
      break;
 8002ea2:	e0b4      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea4:	4b5d      	ldr	r3, [pc, #372]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eae:	4b5b      	ldr	r3, [pc, #364]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d04d      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	4b58      	ldr	r3, [pc, #352]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	ea02 0800 	and.w	r8, r2, r0
 8002ed2:	ea03 0901 	and.w	r9, r3, r1
 8002ed6:	4640      	mov	r0, r8
 8002ed8:	4649      	mov	r1, r9
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	014b      	lsls	r3, r1, #5
 8002ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ee8:	0142      	lsls	r2, r0, #5
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	ebb0 0008 	subs.w	r0, r0, r8
 8002ef2:	eb61 0109 	sbc.w	r1, r1, r9
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	018b      	lsls	r3, r1, #6
 8002f00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f04:	0182      	lsls	r2, r0, #6
 8002f06:	1a12      	subs	r2, r2, r0
 8002f08:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0c:	f04f 0000 	mov.w	r0, #0
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	00d9      	lsls	r1, r3, #3
 8002f16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f1a:	00d0      	lsls	r0, r2, #3
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	eb12 0208 	adds.w	r2, r2, r8
 8002f24:	eb43 0309 	adc.w	r3, r3, r9
 8002f28:	f04f 0000 	mov.w	r0, #0
 8002f2c:	f04f 0100 	mov.w	r1, #0
 8002f30:	0259      	lsls	r1, r3, #9
 8002f32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f36:	0250      	lsls	r0, r2, #9
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	f7fd f944 	bl	80001d4 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4613      	mov	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	e04a      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f56:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	ea02 0400 	and.w	r4, r2, r0
 8002f6e:	ea03 0501 	and.w	r5, r3, r1
 8002f72:	4620      	mov	r0, r4
 8002f74:	4629      	mov	r1, r5
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	014b      	lsls	r3, r1, #5
 8002f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f84:	0142      	lsls	r2, r0, #5
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	1b00      	subs	r0, r0, r4
 8002f8c:	eb61 0105 	sbc.w	r1, r1, r5
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	018b      	lsls	r3, r1, #6
 8002f9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f9e:	0182      	lsls	r2, r0, #6
 8002fa0:	1a12      	subs	r2, r2, r0
 8002fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	00d9      	lsls	r1, r3, #3
 8002fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fb4:	00d0      	lsls	r0, r2, #3
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	1912      	adds	r2, r2, r4
 8002fbc:	eb45 0303 	adc.w	r3, r5, r3
 8002fc0:	f04f 0000 	mov.w	r0, #0
 8002fc4:	f04f 0100 	mov.w	r1, #0
 8002fc8:	0299      	lsls	r1, r3, #10
 8002fca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fce:	0290      	lsls	r0, r2, #10
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	f7fd f8f8 	bl	80001d4 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	60bb      	str	r3, [r7, #8]
      break;
 8003006:	e002      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800300a:	60bb      	str	r3, [r7, #8]
      break;
 800300c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300e:	68bb      	ldr	r3, [r7, #8]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000000 	.word	0x20000000

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003044:	f7ff fff0 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	08008dc0 	.word	0x08008dc0

08003068 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e022      	b.n	80030c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fd fc45 	bl	800091c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2203      	movs	r2, #3
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f814 	bl	80030c8 <HAL_SD_InitCard>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00a      	b.n	80030c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030c8:	b5b0      	push	{r4, r5, r7, lr}
 80030ca:	b08e      	sub	sp, #56	; 0x38
 80030cc:	af04      	add	r7, sp, #16
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80030e4:	2376      	movs	r3, #118	; 0x76
 80030e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681d      	ldr	r5, [r3, #0]
 80030ec:	466c      	mov	r4, sp
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80030fa:	f107 0308 	add.w	r3, r7, #8
 80030fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003100:	4628      	mov	r0, r5
 8003102:	f001 f9c1 	bl	8004488 <SDIO_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800310c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e04c      	b.n	80031b2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_SD_InitCard+0xf4>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f001 f9f9 	bl	800451a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003128:	4b24      	ldr	r3, [pc, #144]	; (80031bc <HAL_SD_InitCard+0xf4>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 ff02 	bl	8003f38 <SD_PowerON>
 8003134:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e02e      	b.n	80031b2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fe23 	bl	8003da0 <SD_InitCard>
 800315a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e01b      	b.n	80031b2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003182:	4618      	mov	r0, r3
 8003184:	f001 fa5c 	bl	8004640 <SDMMC_CmdBlockLength>
 8003188:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00f      	beq.n	80031b0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <HAL_SD_InitCard+0xf8>)
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3728      	adds	r7, #40	; 0x28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ba:	bf00      	nop
 80031bc:	422580a0 	.word	0x422580a0
 80031c0:	004005ff 	.word	0x004005ff

080031c4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b092      	sub	sp, #72	; 0x48
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80031d2:	f7fd fd29 	bl	8000c28 <HAL_GetTick>
 80031d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1bd      	b.n	8003572 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	f040 81b0 	bne.w	8003564 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800320a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	441a      	add	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	429a      	cmp	r2, r3
 8003216:	d907      	bls.n	8003228 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e1a4      	b.n	8003572 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2203      	movs	r2, #3
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	2b01      	cmp	r3, #1
 800323e:	d002      	beq.n	8003246 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003242:	025b      	lsls	r3, r3, #9
 8003244:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800324a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	025b      	lsls	r3, r3, #9
 8003250:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003252:	2390      	movs	r3, #144	; 0x90
 8003254:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003256:	2302      	movs	r3, #2
 8003258:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800325e:	2301      	movs	r3, #1
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f107 0214 	add.w	r2, r7, #20
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f001 f9bb 	bl	80045e8 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d90a      	bls.n	800328e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2202      	movs	r2, #2
 800327c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003284:	4618      	mov	r0, r3
 8003286:	f001 fa1f 	bl	80046c8 <SDMMC_CmdReadMultiBlock>
 800328a:	6478      	str	r0, [r7, #68]	; 0x44
 800328c:	e009      	b.n	80032a2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800329a:	4618      	mov	r0, r3
 800329c:	f001 f9f2 	bl	8004684 <SDMMC_CmdReadSingleBlock>
 80032a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80032a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d012      	beq.n	80032ce <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a7a      	ldr	r2, [pc, #488]	; (8003498 <HAL_SD_ReadBlocks+0x2d4>)
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b6:	431a      	orrs	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e151      	b.n	8003572 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80032d2:	e061      	b.n	8003398 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d03c      	beq.n	800335c <HAL_SD_ReadBlocks+0x198>
 80032e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d039      	beq.n	800335c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40
 80032ec:	e033      	b.n	8003356 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f001 f8f3 	bl	80044de <SDIO_ReadFIFO>
 80032f8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003304:	3301      	adds	r3, #1
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330a:	3b01      	subs	r3, #1
 800330c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	b2da      	uxtb	r2, r3
 8003314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003316:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331a:	3301      	adds	r3, #1
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003320:	3b01      	subs	r3, #1
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	0c1b      	lsrs	r3, r3, #16
 8003328:	b2da      	uxtb	r2, r3
 800332a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	3301      	adds	r3, #1
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003336:	3b01      	subs	r3, #1
 8003338:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	0e1b      	lsrs	r3, r3, #24
 800333e:	b2da      	uxtb	r2, r3
 8003340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003342:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	3301      	adds	r3, #1
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800334a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334c:	3b01      	subs	r3, #1
 800334e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003352:	3301      	adds	r3, #1
 8003354:	643b      	str	r3, [r7, #64]	; 0x40
 8003356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003358:	2b07      	cmp	r3, #7
 800335a:	d9c8      	bls.n	80032ee <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800335c:	f7fd fc64 	bl	8000c28 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003368:	429a      	cmp	r2, r3
 800336a:	d902      	bls.n	8003372 <HAL_SD_ReadBlocks+0x1ae>
 800336c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336e:	2b00      	cmp	r3, #0
 8003370:	d112      	bne.n	8003398 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a48      	ldr	r2, [pc, #288]	; (8003498 <HAL_SD_ReadBlocks+0x2d4>)
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0ec      	b.n	8003572 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339e:	f240 332a 	movw	r3, #810	; 0x32a
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d095      	beq.n	80032d4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d022      	beq.n	80033fc <HAL_SD_ReadBlocks+0x238>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d91f      	bls.n	80033fc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d01b      	beq.n	80033fc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 f9e3 	bl	8004794 <SDMMC_CmdStopTransfer>
 80033ce:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80033d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d012      	beq.n	80033fc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a2f      	ldr	r2, [pc, #188]	; (8003498 <HAL_SD_ReadBlocks+0x2d4>)
 80033dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0ba      	b.n	8003572 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a22      	ldr	r2, [pc, #136]	; (8003498 <HAL_SD_ReadBlocks+0x2d4>)
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	f043 0208 	orr.w	r2, r3, #8
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0a0      	b.n	8003572 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a15      	ldr	r2, [pc, #84]	; (8003498 <HAL_SD_ReadBlocks+0x2d4>)
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	f043 0202 	orr.w	r2, r3, #2
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e086      	b.n	8003572 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d063      	beq.n	800353a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a08      	ldr	r2, [pc, #32]	; (8003498 <HAL_SD_ReadBlocks+0x2d4>)
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	f043 0220 	orr.w	r2, r3, #32
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e06c      	b.n	8003572 <HAL_SD_ReadBlocks+0x3ae>
 8003498:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 f81c 	bl	80044de <SDIO_ReadFIFO>
 80034a6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80034b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b2:	3301      	adds	r3, #1
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80034b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b8:	3b01      	subs	r3, #1
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80034c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c8:	3301      	adds	r3, #1
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80034cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ce:	3b01      	subs	r3, #1
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	3301      	adds	r3, #1
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	3b01      	subs	r3, #1
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	0e1b      	lsrs	r3, r3, #24
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80034f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f4:	3301      	adds	r3, #1
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	3b01      	subs	r3, #1
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80034fe:	f7fd fb93 	bl	8000c28 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800350a:	429a      	cmp	r2, r3
 800350c:	d902      	bls.n	8003514 <HAL_SD_ReadBlocks+0x350>
 800350e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003510:	2b00      	cmp	r3, #0
 8003512:	d112      	bne.n	800353a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a18      	ldr	r2, [pc, #96]	; (800357c <HAL_SD_ReadBlocks+0x3b8>)
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01b      	b.n	8003572 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_SD_ReadBlocks+0x38a>
 8003548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1a6      	bne.n	800349c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f240 523a 	movw	r2, #1338	; 0x53a
 8003556:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e006      	b.n	8003572 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3748      	adds	r7, #72	; 0x48
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	004005ff 	.word	0x004005ff

08003580 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b092      	sub	sp, #72	; 0x48
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800358e:	f7fd fb4b 	bl	8000c28 <HAL_GetTick>
 8003592:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e166      	b.n	8003880 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	f040 8159 	bne.w	8003872 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80035c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	441a      	add	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d907      	bls.n	80035e4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e14d      	b.n	8003880 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2203      	movs	r2, #3
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2200      	movs	r2, #0
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d002      	beq.n	8003602 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	025b      	lsls	r3, r3, #9
 8003600:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003606:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	025b      	lsls	r3, r3, #9
 800360c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800360e:	2390      	movs	r3, #144	; 0x90
 8003610:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003616:	2300      	movs	r3, #0
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800361a:	2301      	movs	r3, #1
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f107 0218 	add.w	r2, r7, #24
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f000 ffdd 	bl	80045e8 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d90a      	bls.n	800364a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003640:	4618      	mov	r0, r3
 8003642:	f001 f885 	bl	8004750 <SDMMC_CmdWriteMultiBlock>
 8003646:	6478      	str	r0, [r7, #68]	; 0x44
 8003648:	e009      	b.n	800365e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2210      	movs	r2, #16
 800364e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f858 	bl	800470c <SDMMC_CmdWriteSingleBlock>
 800365c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800365e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a87      	ldr	r2, [pc, #540]	; (8003888 <HAL_SD_WriteBlocks+0x308>)
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003672:	431a      	orrs	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0fa      	b.n	8003880 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800368e:	e065      	b.n	800375c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d040      	beq.n	8003720 <HAL_SD_WriteBlocks+0x1a0>
 800369e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d03d      	beq.n	8003720 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
 80036a8:	e037      	b.n	800371a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80036aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	3301      	adds	r3, #1
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80036b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b8:	3b01      	subs	r3, #1
 80036ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80036bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	021a      	lsls	r2, r3, #8
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ca:	3301      	adds	r3, #1
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80036ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d0:	3b01      	subs	r3, #1
 80036d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	041a      	lsls	r2, r3, #16
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80036e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e2:	3301      	adds	r3, #1
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80036e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e8:	3b01      	subs	r3, #1
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80036ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	061a      	lsls	r2, r3, #24
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80036f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fa:	3301      	adds	r3, #1
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80036fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003700:	3b01      	subs	r3, #1
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f107 0214 	add.w	r2, r7, #20
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fef2 	bl	80044f8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003716:	3301      	adds	r3, #1
 8003718:	643b      	str	r3, [r7, #64]	; 0x40
 800371a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371c:	2b07      	cmp	r3, #7
 800371e:	d9c4      	bls.n	80036aa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003720:	f7fd fa82 	bl	8000c28 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800372c:	429a      	cmp	r2, r3
 800372e:	d902      	bls.n	8003736 <HAL_SD_WriteBlocks+0x1b6>
 8003730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003732:	2b00      	cmp	r3, #0
 8003734:	d112      	bne.n	800375c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a53      	ldr	r2, [pc, #332]	; (8003888 <HAL_SD_WriteBlocks+0x308>)
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003744:	431a      	orrs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e091      	b.n	8003880 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003762:	f240 331a 	movw	r3, #794	; 0x31a
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d091      	beq.n	8003690 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d022      	beq.n	80037c0 <HAL_SD_WriteBlocks+0x240>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d91f      	bls.n	80037c0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	2b03      	cmp	r3, #3
 8003786:	d01b      	beq.n	80037c0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f001 f801 	bl	8004794 <SDMMC_CmdStopTransfer>
 8003792:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003796:	2b00      	cmp	r3, #0
 8003798:	d012      	beq.n	80037c0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3a      	ldr	r2, [pc, #232]	; (8003888 <HAL_SD_WriteBlocks+0x308>)
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a8:	431a      	orrs	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e05f      	b.n	8003880 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d012      	beq.n	80037f4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2d      	ldr	r2, [pc, #180]	; (8003888 <HAL_SD_WriteBlocks+0x308>)
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	f043 0208 	orr.w	r2, r3, #8
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e045      	b.n	8003880 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d012      	beq.n	8003828 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a20      	ldr	r2, [pc, #128]	; (8003888 <HAL_SD_WriteBlocks+0x308>)
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	f043 0202 	orr.w	r2, r3, #2
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e02b      	b.n	8003880 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	d012      	beq.n	800385c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a13      	ldr	r2, [pc, #76]	; (8003888 <HAL_SD_WriteBlocks+0x308>)
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	f043 0210 	orr.w	r2, r3, #16
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e011      	b.n	8003880 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f240 523a 	movw	r2, #1338	; 0x53a
 8003864:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e006      	b.n	8003880 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3748      	adds	r7, #72	; 0x48
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	004005ff 	.word	0x004005ff

0800388c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800389a:	0f9b      	lsrs	r3, r3, #30
 800389c:	b2da      	uxtb	r2, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a6:	0e9b      	lsrs	r3, r3, #26
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b8:	0e1b      	lsrs	r3, r3, #24
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ca:	0c1b      	lsrs	r3, r3, #16
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ec:	0d1b      	lsrs	r3, r3, #20
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	b2da      	uxtb	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800390a:	0bdb      	lsrs	r3, r3, #15
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	b2da      	uxtb	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800391c:	0b9b      	lsrs	r3, r3, #14
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	b2da      	uxtb	r2, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800392e:	0b5b      	lsrs	r3, r3, #13
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	b2da      	uxtb	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003940:	0b1b      	lsrs	r3, r3, #12
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	b2da      	uxtb	r2, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2200      	movs	r2, #0
 8003952:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	2b00      	cmp	r3, #0
 800395a:	d163      	bne.n	8003a24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003960:	009a      	lsls	r2, r3, #2
 8003962:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003966:	4013      	ands	r3, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800396c:	0f92      	lsrs	r2, r2, #30
 800396e:	431a      	orrs	r2, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003978:	0edb      	lsrs	r3, r3, #27
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	b2da      	uxtb	r2, r3
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398a:	0e1b      	lsrs	r3, r3, #24
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	b2da      	uxtb	r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399c:	0d5b      	lsrs	r3, r3, #21
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ae:	0c9b      	lsrs	r3, r3, #18
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c0:	0bdb      	lsrs	r3, r3, #15
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	7e1b      	ldrb	r3, [r3, #24]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	3302      	adds	r3, #2
 80039e4:	2201      	movs	r2, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039ee:	fb02 f203 	mul.w	r2, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	7a1b      	ldrb	r3, [r3, #8]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	2201      	movs	r2, #1
 8003a02:	409a      	lsls	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a10:	0a52      	lsrs	r2, r2, #9
 8003a12:	fb02 f203 	mul.w	r2, r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a20:	661a      	str	r2, [r3, #96]	; 0x60
 8003a22:	e031      	b.n	8003a88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d11d      	bne.n	8003a68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3a:	0c1b      	lsrs	r3, r3, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	3301      	adds	r3, #1
 8003a48:	029a      	lsls	r2, r3, #10
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	661a      	str	r2, [r3, #96]	; 0x60
 8003a66:	e00f      	b.n	8003a88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a58      	ldr	r2, [pc, #352]	; (8003bd0 <HAL_SD_GetCardCSD+0x344>)
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e09d      	b.n	8003bc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8c:	0b9b      	lsrs	r3, r3, #14
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9e:	09db      	lsrs	r3, r3, #7
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	0fdb      	lsrs	r3, r3, #31
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	0f5b      	lsrs	r3, r3, #29
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	0e9b      	lsrs	r3, r3, #26
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	0d9b      	lsrs	r3, r3, #22
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	0d5b      	lsrs	r3, r3, #21
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	0bdb      	lsrs	r3, r3, #15
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	0b9b      	lsrs	r3, r3, #14
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	0b5b      	lsrs	r3, r3, #13
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	0b1b      	lsrs	r3, r3, #12
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	0a9b      	lsrs	r3, r3, #10
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	004005ff 	.word	0x004005ff

08003bd4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003c2c:	b5b0      	push	{r4, r5, r7, lr}
 8003c2e:	b08e      	sub	sp, #56	; 0x38
 8003c30:	af04      	add	r7, sp, #16
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2203      	movs	r2, #3
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d02e      	beq.n	8003caa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c52:	d106      	bne.n	8003c62 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38
 8003c60:	e029      	b.n	8003cb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c68:	d10a      	bne.n	8003c80 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa1a 	bl	80040a4 <SD_WideBus_Enable>
 8003c70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c7e:	e01a      	b.n	8003cb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa57 	bl	800413a <SD_WideBus_Disable>
 8003c8c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
 8003c9a:	e00c      	b.n	8003cb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ca8:	e005      	b.n	8003cb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cd4:	e01f      	b.n	8003d16 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681d      	ldr	r5, [r3, #0]
 8003cfc:	466c      	mov	r4, sp
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d10:	4628      	mov	r0, r5
 8003d12:	f000 fbb9 	bl	8004488 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fc8e 	bl	8004640 <SDMMC_CmdBlockLength>
 8003d24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00c      	beq.n	8003d46 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3728      	adds	r7, #40	; 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bdb0      	pop	{r4, r5, r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	004005ff 	.word	0x004005ff

08003d60 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f96e 	bl	8004054 <SD_SendStatus>
 8003d78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	0a5b      	lsrs	r3, r3, #9
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003d96:	693b      	ldr	r3, [r7, #16]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003da0:	b5b0      	push	{r4, r5, r7, lr}
 8003da2:	b094      	sub	sp, #80	; 0x50
 8003da4:	af04      	add	r7, sp, #16
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003da8:	2301      	movs	r3, #1
 8003daa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fbc1 	bl	8004538 <SDIO_GetPowerState>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003dbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003dc0:	e0b6      	b.n	8003f30 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d02f      	beq.n	8003e2a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fdea 	bl	80049a8 <SDMMC_CmdSendCID>
 8003dd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <SD_InitCard+0x40>
    {
      return errorstate;
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dde:	e0a7      	b.n	8003f30 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fbeb 	bl	80045c2 <SDIO_GetResponse>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2104      	movs	r1, #4
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fbe2 	bl	80045c2 <SDIO_GetResponse>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2108      	movs	r1, #8
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fbd9 	bl	80045c2 <SDIO_GetResponse>
 8003e10:	4602      	mov	r2, r0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	210c      	movs	r1, #12
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fbd0 	bl	80045c2 <SDIO_GetResponse>
 8003e22:	4602      	mov	r2, r0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d00d      	beq.n	8003e4e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f107 020e 	add.w	r2, r7, #14
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fdf0 	bl	8004a22 <SDMMC_CmdSetRelAdd>
 8003e42:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <SD_InitCard+0xae>
    {
      return errorstate;
 8003e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4c:	e070      	b.n	8003f30 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d036      	beq.n	8003ec4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003e56:	89fb      	ldrh	r3, [r7, #14]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f000 fdba 	bl	80049e4 <SDMMC_CmdSendCSD>
 8003e70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7a:	e059      	b.n	8003f30 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fb9d 	bl	80045c2 <SDIO_GetResponse>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2104      	movs	r1, #4
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fb94 	bl	80045c2 <SDIO_GetResponse>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2108      	movs	r1, #8
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fb8b 	bl	80045c2 <SDIO_GetResponse>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	210c      	movs	r1, #12
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fb82 	bl	80045c2 <SDIO_GetResponse>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2104      	movs	r1, #4
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fb79 	bl	80045c2 <SDIO_GetResponse>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	0d1a      	lsrs	r2, r3, #20
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003ed8:	f107 0310 	add.w	r3, r7, #16
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fcd4 	bl	800388c <HAL_SD_GetCardCSD>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003eea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003eee:	e01f      	b.n	8003f30 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	461a      	mov	r2, r3
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	4608      	mov	r0, r1
 8003f02:	f000 fc69 	bl	80047d8 <SDMMC_CmdSelDesel>
 8003f06:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <SD_InitCard+0x172>
  {
    return errorstate;
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	e00e      	b.n	8003f30 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681d      	ldr	r5, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	466c      	mov	r4, sp
 8003f1a:	f103 0210 	add.w	r2, r3, #16
 8003f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f24:	3304      	adds	r3, #4
 8003f26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f000 faad 	bl	8004488 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3740      	adds	r7, #64	; 0x40
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bdb0      	pop	{r4, r5, r7, pc}

08003f38 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fc64 	bl	800481e <SDMMC_CmdGoIdleState>
 8003f56:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	e072      	b.n	8004048 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fc77 	bl	800485a <SDMMC_CmdOperCond>
 8003f6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fc4d 	bl	800481e <SDMMC_CmdGoIdleState>
 8003f84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	e05b      	b.n	8004048 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d137      	bne.n	800400e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fc77 	bl	8004898 <SDMMC_CmdAppCommand>
 8003faa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d02d      	beq.n	800400e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003fb6:	e047      	b.n	8004048 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fc6a 	bl	8004898 <SDMMC_CmdAppCommand>
 8003fc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <SD_PowerON+0x98>
    {
      return errorstate;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	e03b      	b.n	8004048 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	491e      	ldr	r1, [pc, #120]	; (8004050 <SD_PowerON+0x118>)
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fc80 	bl	80048dc <SDMMC_CmdAppOperCommand>
 8003fdc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003fe8:	e02e      	b.n	8004048 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fae6 	bl	80045c2 <SDIO_GetResponse>
 8003ff6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	0fdb      	lsrs	r3, r3, #31
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <SD_PowerON+0xcc>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <SD_PowerON+0xce>
 8004004:	2300      	movs	r3, #0
 8004006:	613b      	str	r3, [r7, #16]

    count++;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	3301      	adds	r3, #1
 800400c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004014:	4293      	cmp	r3, r2
 8004016:	d802      	bhi.n	800401e <SD_PowerON+0xe6>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0cc      	beq.n	8003fb8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004024:	4293      	cmp	r3, r2
 8004026:	d902      	bls.n	800402e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800402c:	e00c      	b.n	8004048 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
 800403e:	e002      	b.n	8004046 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	c1100000 	.word	0xc1100000

08004054 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004064:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004068:	e018      	b.n	800409c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 fcf4 	bl	8004a64 <SDMMC_CmdSendStatus>
 800407c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	e009      	b.n	800409c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fa97 	bl	80045c2 <SDIO_GetResponse>
 8004094:	4602      	mov	r2, r0
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fa81 	bl	80045c2 <SDIO_GetResponse>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ca:	d102      	bne.n	80040d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80040cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040d0:	e02f      	b.n	8004132 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80040d2:	f107 030c 	add.w	r3, r7, #12
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f879 	bl	80041d0 <SD_FindSCR>
 80040de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	e023      	b.n	8004132 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01c      	beq.n	800412e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f000 fbc9 	bl	8004898 <SDMMC_CmdAppCommand>
 8004106:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	e00f      	b.n	8004132 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2102      	movs	r1, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fc02 	bl	8004922 <SDMMC_CmdBusWidth>
 800411e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	e003      	b.n	8004132 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800412a:	2300      	movs	r3, #0
 800412c:	e001      	b.n	8004132 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800412e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2100      	movs	r1, #0
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fa36 	bl	80045c2 <SDIO_GetResponse>
 8004156:	4603      	mov	r3, r0
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004160:	d102      	bne.n	8004168 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004166:	e02f      	b.n	80041c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f82e 	bl	80041d0 <SD_FindSCR>
 8004174:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	e023      	b.n	80041c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01c      	beq.n	80041c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f000 fb7e 	bl	8004898 <SDMMC_CmdAppCommand>
 800419c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	e00f      	b.n	80041c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fbb7 	bl	8004922 <SDMMC_CmdBusWidth>
 80041b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	e003      	b.n	80041c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e001      	b.n	80041c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b08f      	sub	sp, #60	; 0x3c
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80041da:	f7fc fd25 	bl	8000c28 <HAL_GetTick>
 80041de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80041e4:	2300      	movs	r3, #0
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2108      	movs	r1, #8
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fa22 	bl	8004640 <SDMMC_CmdBlockLength>
 80041fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	e0b2      	b.n	800436e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f000 fb3f 	bl	8004898 <SDMMC_CmdAppCommand>
 800421a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	e0a3      	b.n	800436e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800422a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800422c:	2308      	movs	r3, #8
 800422e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004230:	2330      	movs	r3, #48	; 0x30
 8004232:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004234:	2302      	movs	r3, #2
 8004236:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004238:	2300      	movs	r3, #0
 800423a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800423c:	2301      	movs	r3, #1
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f107 0210 	add.w	r2, r7, #16
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f9cc 	bl	80045e8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fb86 	bl	8004966 <SDMMC_CmdSendSCR>
 800425a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d02a      	beq.n	80042b8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	e083      	b.n	800436e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00f      	beq.n	8004294 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6819      	ldr	r1, [r3, #0]
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	f107 0208 	add.w	r2, r7, #8
 8004280:	18d4      	adds	r4, r2, r3
 8004282:	4608      	mov	r0, r1
 8004284:	f000 f92b 	bl	80044de <SDIO_ReadFIFO>
 8004288:	4603      	mov	r3, r0
 800428a:	6023      	str	r3, [r4, #0]
      index++;
 800428c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428e:	3301      	adds	r3, #1
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
 8004292:	e006      	b.n	80042a2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d012      	beq.n	80042c8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80042a2:	f7fc fcc1 	bl	8000c28 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b0:	d102      	bne.n	80042b8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80042b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042b6:	e05a      	b.n	800436e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0cf      	beq.n	8004266 <SD_FindSCR+0x96>
 80042c6:	e000      	b.n	80042ca <SD_FindSCR+0xfa>
      break;
 80042c8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2208      	movs	r2, #8
 80042de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80042e0:	2308      	movs	r3, #8
 80042e2:	e044      	b.n	800436e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2202      	movs	r2, #2
 80042f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80042fa:	2302      	movs	r3, #2
 80042fc:	e037      	b.n	800436e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2220      	movs	r2, #32
 8004312:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004314:	2320      	movs	r3, #32
 8004316:	e02a      	b.n	800436e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004320:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	061a      	lsls	r2, r3, #24
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800432e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004338:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	0e1b      	lsrs	r3, r3, #24
 800433e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	601a      	str	r2, [r3, #0]
    scr++;
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	3304      	adds	r3, #4
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	061a      	lsls	r2, r3, #24
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004356:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004360:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0e1b      	lsrs	r3, r3, #24
 8004366:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	373c      	adds	r7, #60	; 0x3c
 8004372:	46bd      	mov	sp, r7
 8004374:	bd90      	pop	{r4, r7, pc}

08004376 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e07b      	b.n	8004480 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d108      	bne.n	80043a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004398:	d009      	beq.n	80043ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	61da      	str	r2, [r3, #28]
 80043a0:	e005      	b.n	80043ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fc fb0f 	bl	80009ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	ea42 0103 	orr.w	r1, r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	f003 0104 	and.w	r1, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0210 	and.w	r2, r3, #16
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004488:	b084      	sub	sp, #16
 800448a:	b480      	push	{r7}
 800448c:	b085      	sub	sp, #20
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	f107 001c 	add.w	r0, r7, #28
 8004496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800449e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80044a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80044a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80044a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80044aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80044ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80044ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80044b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80044c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	b004      	add	sp, #16
 80044dc:	4770      	bx	lr

080044de <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2203      	movs	r2, #3
 8004526:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004528:	2002      	movs	r0, #2
 800452a:	f7fc fb89 	bl	8000c40 <HAL_Delay>
  
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0303 	and.w	r3, r3, #3
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004572:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004578:	431a      	orrs	r2, r3
                       Command->CPSM);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800457e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800458e:	f023 030f 	bic.w	r3, r3, #15
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	b2db      	uxtb	r3, r3
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3314      	adds	r3, #20
 80045d0:	461a      	mov	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	4413      	add	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
}  
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800460e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004614:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800461a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004632:	2300      	movs	r3, #0

}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800464e:	2310      	movs	r3, #16
 8004650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800465a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff ff74 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	2110      	movs	r1, #16
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fa44 	bl	8004b00 <SDMMC_GetCmdResp1>
 8004678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800467a:	69fb      	ldr	r3, [r7, #28]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004692:	2311      	movs	r3, #17
 8004694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004696:	2340      	movs	r3, #64	; 0x40
 8004698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800469e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ff52 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	2111      	movs	r1, #17
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fa22 	bl	8004b00 <SDMMC_GetCmdResp1>
 80046bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046be:	69fb      	ldr	r3, [r7, #28]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80046d6:	2312      	movs	r3, #18
 80046d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046da:	2340      	movs	r3, #64	; 0x40
 80046dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046e8:	f107 0308 	add.w	r3, r7, #8
 80046ec:	4619      	mov	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ff30 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	2112      	movs	r1, #18
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa00 	bl	8004b00 <SDMMC_GetCmdResp1>
 8004700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004702:	69fb      	ldr	r3, [r7, #28]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800471a:	2318      	movs	r3, #24
 800471c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800471e:	2340      	movs	r3, #64	; 0x40
 8004720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800472a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800472c:	f107 0308 	add.w	r3, r7, #8
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff ff0e 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004738:	f241 3288 	movw	r2, #5000	; 0x1388
 800473c:	2118      	movs	r1, #24
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f9de 	bl	8004b00 <SDMMC_GetCmdResp1>
 8004744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004746:	69fb      	ldr	r3, [r7, #28]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800475e:	2319      	movs	r3, #25
 8004760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004762:	2340      	movs	r3, #64	; 0x40
 8004764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800476a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800476e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004770:	f107 0308 	add.w	r3, r7, #8
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff feec 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	2119      	movs	r1, #25
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f9bc 	bl	8004b00 <SDMMC_GetCmdResp1>
 8004788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800478a:	69fb      	ldr	r3, [r7, #28]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80047a0:	230c      	movs	r3, #12
 80047a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047a4:	2340      	movs	r3, #64	; 0x40
 80047a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047b2:	f107 0308 	add.w	r3, r7, #8
 80047b6:	4619      	mov	r1, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fecb 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <SDMMC_CmdStopTransfer+0x40>)
 80047c0:	210c      	movs	r1, #12
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f99c 	bl	8004b00 <SDMMC_GetCmdResp1>
 80047c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047ca:	69fb      	ldr	r3, [r7, #28]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	05f5e100 	.word	0x05f5e100

080047d8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80047e8:	2307      	movs	r3, #7
 80047ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047ec:	2340      	movs	r3, #64	; 0x40
 80047ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047fa:	f107 0310 	add.w	r3, r7, #16
 80047fe:	4619      	mov	r1, r3
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7ff fea7 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	2107      	movs	r1, #7
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f977 	bl	8004b00 <SDMMC_GetCmdResp1>
 8004812:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004816:	4618      	mov	r0, r3
 8004818:	3728      	adds	r7, #40	; 0x28
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b088      	sub	sp, #32
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800483a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800483c:	f107 0308 	add.w	r3, r7, #8
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff fe86 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f92d 	bl	8004aa8 <SDMMC_GetCmdError>
 800484e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004850:	69fb      	ldr	r3, [r7, #28]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b088      	sub	sp, #32
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004862:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004868:	2308      	movs	r3, #8
 800486a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800486c:	2340      	movs	r3, #64	; 0x40
 800486e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004878:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff fe67 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fb24 	bl	8004ed4 <SDMMC_GetCmdResp7>
 800488c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800488e:	69fb      	ldr	r3, [r7, #28]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80048a6:	2337      	movs	r3, #55	; 0x37
 80048a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048aa:	2340      	movs	r3, #64	; 0x40
 80048ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048b8:	f107 0308 	add.w	r3, r7, #8
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff fe48 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80048c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c8:	2137      	movs	r1, #55	; 0x37
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f918 	bl	8004b00 <SDMMC_GetCmdResp1>
 80048d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048d2:	69fb      	ldr	r3, [r7, #28]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80048f2:	2329      	movs	r3, #41	; 0x29
 80048f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048f6:	2340      	movs	r3, #64	; 0x40
 80048f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004902:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004904:	f107 0308 	add.w	r3, r7, #8
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff fe22 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fa2b 	bl	8004d6c <SDMMC_GetCmdResp3>
 8004916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004918:	69fb      	ldr	r3, [r7, #28]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b088      	sub	sp, #32
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004930:	2306      	movs	r3, #6
 8004932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004934:	2340      	movs	r3, #64	; 0x40
 8004936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800493c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004940:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004942:	f107 0308 	add.w	r3, r7, #8
 8004946:	4619      	mov	r1, r3
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fe03 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	2106      	movs	r1, #6
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f8d3 	bl	8004b00 <SDMMC_GetCmdResp1>
 800495a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800495c:	69fb      	ldr	r3, [r7, #28]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b088      	sub	sp, #32
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004972:	2333      	movs	r3, #51	; 0x33
 8004974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004976:	2340      	movs	r3, #64	; 0x40
 8004978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800497e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004982:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004984:	f107 0308 	add.w	r3, r7, #8
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fde2 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	2133      	movs	r1, #51	; 0x33
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8b2 	bl	8004b00 <SDMMC_GetCmdResp1>
 800499c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800499e:	69fb      	ldr	r3, [r7, #28]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80049b4:	2302      	movs	r3, #2
 80049b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80049b8:	23c0      	movs	r3, #192	; 0xc0
 80049ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049c6:	f107 0308 	add.w	r3, r7, #8
 80049ca:	4619      	mov	r1, r3
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff fdc1 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f982 	bl	8004cdc <SDMMC_GetCmdResp2>
 80049d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049da:	69fb      	ldr	r3, [r7, #28]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3720      	adds	r7, #32
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80049f2:	2309      	movs	r3, #9
 80049f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80049f6:	23c0      	movs	r3, #192	; 0xc0
 80049f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff fda2 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f963 	bl	8004cdc <SDMMC_GetCmdResp2>
 8004a16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a18:	69fb      	ldr	r3, [r7, #28]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b088      	sub	sp, #32
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004a30:	2303      	movs	r3, #3
 8004a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a34:	2340      	movs	r3, #64	; 0x40
 8004a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff fd83 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	2103      	movs	r1, #3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f9c8 	bl	8004de8 <SDMMC_GetCmdResp6>
 8004a58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004a72:	230d      	movs	r3, #13
 8004a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a76:	2340      	movs	r3, #64	; 0x40
 8004a78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a84:	f107 0308 	add.w	r3, r7, #8
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fd62 	bl	8004554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a94:	210d      	movs	r1, #13
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f832 	bl	8004b00 <SDMMC_GetCmdResp1>
 8004a9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a9e:	69fb      	ldr	r3, [r7, #28]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <SDMMC_GetCmdError+0x50>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a11      	ldr	r2, [pc, #68]	; (8004afc <SDMMC_GetCmdError+0x54>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0a5b      	lsrs	r3, r3, #9
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	fb02 f303 	mul.w	r3, r2, r3
 8004ac4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	60fa      	str	r2, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ad0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ad4:	e009      	b.n	8004aea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f1      	beq.n	8004ac6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	22c5      	movs	r2, #197	; 0xc5
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000000 	.word	0x20000000
 8004afc:	10624dd3 	.word	0x10624dd3

08004b00 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004b0e:	4b70      	ldr	r3, [pc, #448]	; (8004cd0 <SDMMC_GetCmdResp1+0x1d0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a70      	ldr	r2, [pc, #448]	; (8004cd4 <SDMMC_GetCmdResp1+0x1d4>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	0a5a      	lsrs	r2, r3, #9
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	fb02 f303 	mul.w	r3, r2, r3
 8004b20:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	1e5a      	subs	r2, r3, #1
 8004b26:	61fa      	str	r2, [r7, #28]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b30:	e0c9      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0ef      	beq.n	8004b22 <SDMMC_GetCmdResp1+0x22>
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1ea      	bne.n	8004b22 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d004      	beq.n	8004b62 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b5e:	2304      	movs	r3, #4
 8004b60:	e0b1      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0a6      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	22c5      	movs	r2, #197	; 0xc5
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff fd12 	bl	80045a8 <SDIO_GetCommandResponse>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	7afb      	ldrb	r3, [r7, #11]
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d001      	beq.n	8004b92 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e099      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004b92:	2100      	movs	r1, #0
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff fd14 	bl	80045c2 <SDIO_GetResponse>
 8004b9a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4b4e      	ldr	r3, [pc, #312]	; (8004cd8 <SDMMC_GetCmdResp1+0x1d8>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e08d      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da02      	bge.n	8004bb6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bb4:	e087      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004bc0:	2340      	movs	r3, #64	; 0x40
 8004bc2:	e080      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	e079      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004be0:	e071      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bf0:	e069      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c00:	e061      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c10:	e059      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c20:	e051      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c30:	e049      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004c3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c40:	e041      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c50:	e039      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c60:	e031      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004c6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c70:	e029      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004c7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c80:	e021      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004c8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c90:	e019      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004c9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ca0:	e011      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004cac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cb0:	e009      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004cbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004cc0:	e001      	b.n	8004cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000000 	.word	0x20000000
 8004cd4:	10624dd3 	.word	0x10624dd3
 8004cd8:	fdffe008 	.word	0xfdffe008

08004cdc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <SDMMC_GetCmdResp2+0x88>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <SDMMC_GetCmdResp2+0x8c>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	0a5b      	lsrs	r3, r3, #9
 8004cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf4:	fb02 f303 	mul.w	r3, r2, r3
 8004cf8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1e5a      	subs	r2, r3, #1
 8004cfe:	60fa      	str	r2, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d102      	bne.n	8004d0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d08:	e026      	b.n	8004d58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0ef      	beq.n	8004cfa <SDMMC_GetCmdResp2+0x1e>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ea      	bne.n	8004cfa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2204      	movs	r2, #4
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d36:	2304      	movs	r3, #4
 8004d38:	e00e      	b.n	8004d58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d004      	beq.n	8004d50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e003      	b.n	8004d58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	22c5      	movs	r2, #197	; 0xc5
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	20000000 	.word	0x20000000
 8004d68:	10624dd3 	.word	0x10624dd3

08004d6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d74:	4b1a      	ldr	r3, [pc, #104]	; (8004de0 <SDMMC_GetCmdResp3+0x74>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <SDMMC_GetCmdResp3+0x78>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	0a5b      	lsrs	r3, r3, #9
 8004d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1e5a      	subs	r2, r3, #1
 8004d8e:	60fa      	str	r2, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d98:	e01b      	b.n	8004dd2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0ef      	beq.n	8004d8a <SDMMC_GetCmdResp3+0x1e>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1ea      	bne.n	8004d8a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004dc6:	2304      	movs	r3, #4
 8004dc8:	e003      	b.n	8004dd2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	22c5      	movs	r2, #197	; 0xc5
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000000 	.word	0x20000000
 8004de4:	10624dd3 	.word	0x10624dd3

08004de8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	460b      	mov	r3, r1
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004df6:	4b35      	ldr	r3, [pc, #212]	; (8004ecc <SDMMC_GetCmdResp6+0xe4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a35      	ldr	r2, [pc, #212]	; (8004ed0 <SDMMC_GetCmdResp6+0xe8>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	0a5b      	lsrs	r3, r3, #9
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	fb02 f303 	mul.w	r3, r2, r3
 8004e0a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	1e5a      	subs	r2, r3, #1
 8004e10:	61fa      	str	r2, [r7, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e1a:	e052      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ef      	beq.n	8004e0c <SDMMC_GetCmdResp6+0x24>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1ea      	bne.n	8004e0c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2204      	movs	r2, #4
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e48:	2304      	movs	r3, #4
 8004e4a:	e03a      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e02f      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff fba0 	bl	80045a8 <SDIO_GetCommandResponse>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	7afb      	ldrb	r3, [r7, #11]
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d001      	beq.n	8004e76 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e025      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	22c5      	movs	r2, #197	; 0xc5
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fb9f 	bl	80045c2 <SDIO_GetResponse>
 8004e84:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	0c1b      	lsrs	r3, r3, #16
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e011      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eac:	e009      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ebc:	e001      	b.n	8004ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000000 	.word	0x20000000
 8004ed0:	10624dd3 	.word	0x10624dd3

08004ed4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004edc:	4b22      	ldr	r3, [pc, #136]	; (8004f68 <SDMMC_GetCmdResp7+0x94>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <SDMMC_GetCmdResp7+0x98>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	0a5b      	lsrs	r3, r3, #9
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1e5a      	subs	r2, r3, #1
 8004ef6:	60fa      	str	r2, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004efc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f00:	e02c      	b.n	8004f5c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ef      	beq.n	8004ef2 <SDMMC_GetCmdResp7+0x1e>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ea      	bne.n	8004ef2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f2e:	2304      	movs	r3, #4
 8004f30:	e014      	b.n	8004f5c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e009      	b.n	8004f5c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2240      	movs	r2, #64	; 0x40
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004f5a:	2300      	movs	r3, #0
  
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	20000000 	.word	0x20000000
 8004f6c:	10624dd3 	.word	0x10624dd3

08004f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f70:	b084      	sub	sp, #16
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	f107 001c 	add.w	r0, r7, #28
 8004f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d122      	bne.n	8004fce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 fb1c 	bl	8006600 <USB_CoreReset>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	73fb      	strb	r3, [r7, #15]
 8004fcc:	e01a      	b.n	8005004 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f001 fb10 	bl	8006600 <USB_CoreReset>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ff6:	e005      	b.n	8005004 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	2b01      	cmp	r3, #1
 8005008:	d10b      	bne.n	8005022 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f043 0206 	orr.w	r2, r3, #6
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005022:	7bfb      	ldrb	r3, [r7, #15]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800502e:	b004      	add	sp, #16
 8005030:	4770      	bx	lr
	...

08005034 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d165      	bne.n	8005114 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4a41      	ldr	r2, [pc, #260]	; (8005150 <USB_SetTurnaroundTime+0x11c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d906      	bls.n	800505e <USB_SetTurnaroundTime+0x2a>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4a40      	ldr	r2, [pc, #256]	; (8005154 <USB_SetTurnaroundTime+0x120>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d202      	bcs.n	800505e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005058:	230f      	movs	r3, #15
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	e062      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4a3c      	ldr	r2, [pc, #240]	; (8005154 <USB_SetTurnaroundTime+0x120>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d306      	bcc.n	8005074 <USB_SetTurnaroundTime+0x40>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4a3b      	ldr	r2, [pc, #236]	; (8005158 <USB_SetTurnaroundTime+0x124>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d202      	bcs.n	8005074 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800506e:	230e      	movs	r3, #14
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	e057      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4a38      	ldr	r2, [pc, #224]	; (8005158 <USB_SetTurnaroundTime+0x124>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d306      	bcc.n	800508a <USB_SetTurnaroundTime+0x56>
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4a37      	ldr	r2, [pc, #220]	; (800515c <USB_SetTurnaroundTime+0x128>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d202      	bcs.n	800508a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005084:	230d      	movs	r3, #13
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	e04c      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4a33      	ldr	r2, [pc, #204]	; (800515c <USB_SetTurnaroundTime+0x128>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d306      	bcc.n	80050a0 <USB_SetTurnaroundTime+0x6c>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4a32      	ldr	r2, [pc, #200]	; (8005160 <USB_SetTurnaroundTime+0x12c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d802      	bhi.n	80050a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800509a:	230c      	movs	r3, #12
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e041      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4a2f      	ldr	r2, [pc, #188]	; (8005160 <USB_SetTurnaroundTime+0x12c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d906      	bls.n	80050b6 <USB_SetTurnaroundTime+0x82>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4a2e      	ldr	r2, [pc, #184]	; (8005164 <USB_SetTurnaroundTime+0x130>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d802      	bhi.n	80050b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050b0:	230b      	movs	r3, #11
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e036      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4a2a      	ldr	r2, [pc, #168]	; (8005164 <USB_SetTurnaroundTime+0x130>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d906      	bls.n	80050cc <USB_SetTurnaroundTime+0x98>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a29      	ldr	r2, [pc, #164]	; (8005168 <USB_SetTurnaroundTime+0x134>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d802      	bhi.n	80050cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050c6:	230a      	movs	r3, #10
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e02b      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4a26      	ldr	r2, [pc, #152]	; (8005168 <USB_SetTurnaroundTime+0x134>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d906      	bls.n	80050e2 <USB_SetTurnaroundTime+0xae>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a25      	ldr	r2, [pc, #148]	; (800516c <USB_SetTurnaroundTime+0x138>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d202      	bcs.n	80050e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050dc:	2309      	movs	r3, #9
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e020      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4a21      	ldr	r2, [pc, #132]	; (800516c <USB_SetTurnaroundTime+0x138>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d306      	bcc.n	80050f8 <USB_SetTurnaroundTime+0xc4>
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4a20      	ldr	r2, [pc, #128]	; (8005170 <USB_SetTurnaroundTime+0x13c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d802      	bhi.n	80050f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050f2:	2308      	movs	r3, #8
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e015      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4a1d      	ldr	r2, [pc, #116]	; (8005170 <USB_SetTurnaroundTime+0x13c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d906      	bls.n	800510e <USB_SetTurnaroundTime+0xda>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <USB_SetTurnaroundTime+0x140>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d202      	bcs.n	800510e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005108:	2307      	movs	r3, #7
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e00a      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800510e:	2306      	movs	r3, #6
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	e007      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800511a:	2309      	movs	r3, #9
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e001      	b.n	8005124 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005120:	2309      	movs	r3, #9
 8005122:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	029b      	lsls	r3, r3, #10
 8005138:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800513c:	431a      	orrs	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	00d8acbf 	.word	0x00d8acbf
 8005154:	00e4e1c0 	.word	0x00e4e1c0
 8005158:	00f42400 	.word	0x00f42400
 800515c:	01067380 	.word	0x01067380
 8005160:	011a499f 	.word	0x011a499f
 8005164:	01312cff 	.word	0x01312cff
 8005168:	014ca43f 	.word	0x014ca43f
 800516c:	016e3600 	.word	0x016e3600
 8005170:	01a6ab1f 	.word	0x01a6ab1f
 8005174:	01e84800 	.word	0x01e84800

08005178 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f043 0201 	orr.w	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d115      	bne.n	800520a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051ea:	2001      	movs	r0, #1
 80051ec:	f7fb fd28 	bl	8000c40 <HAL_Delay>
      ms++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f001 f972 	bl	80064e0 <USB_GetMode>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d01e      	beq.n	8005240 <USB_SetCurrentMode+0x84>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b31      	cmp	r3, #49	; 0x31
 8005206:	d9f0      	bls.n	80051ea <USB_SetCurrentMode+0x2e>
 8005208:	e01a      	b.n	8005240 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d115      	bne.n	800523c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800521c:	2001      	movs	r0, #1
 800521e:	f7fb fd0f 	bl	8000c40 <HAL_Delay>
      ms++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f001 f959 	bl	80064e0 <USB_GetMode>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <USB_SetCurrentMode+0x84>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b31      	cmp	r3, #49	; 0x31
 8005238:	d9f0      	bls.n	800521c <USB_SetCurrentMode+0x60>
 800523a:	e001      	b.n	8005240 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e005      	b.n	800524c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b32      	cmp	r3, #50	; 0x32
 8005244:	d101      	bne.n	800524a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005254:	b084      	sub	sp, #16
 8005256:	b580      	push	{r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e009      	b.n	8005288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3340      	adds	r3, #64	; 0x40
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	2200      	movs	r2, #0
 8005280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3301      	adds	r3, #1
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0e      	cmp	r3, #14
 800528c:	d9f2      	bls.n	8005274 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800528e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d11c      	bne.n	80052ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
 80052cc:	e00b      	b.n	80052e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ec:	461a      	mov	r2, r3
 80052ee:	2300      	movs	r3, #0
 80052f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	4619      	mov	r1, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005300:	461a      	mov	r2, r3
 8005302:	680b      	ldr	r3, [r1, #0]
 8005304:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	2b01      	cmp	r3, #1
 800530a:	d10c      	bne.n	8005326 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005312:	2100      	movs	r1, #0
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f945 	bl	80055a4 <USB_SetDevSpeed>
 800531a:	e008      	b.n	800532e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800531c:	2101      	movs	r1, #1
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f940 	bl	80055a4 <USB_SetDevSpeed>
 8005324:	e003      	b.n	800532e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005326:	2103      	movs	r1, #3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f93b 	bl	80055a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800532e:	2110      	movs	r1, #16
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f8f3 	bl	800551c <USB_FlushTxFifo>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f90f 	bl	8005564 <USB_FlushRxFifo>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	461a      	mov	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	461a      	mov	r2, r3
 8005364:	2300      	movs	r3, #0
 8005366:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	461a      	mov	r2, r3
 8005370:	2300      	movs	r3, #0
 8005372:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e043      	b.n	8005402 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800538c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005390:	d118      	bne.n	80053c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	461a      	mov	r2, r3
 80053a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	e013      	b.n	80053d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	461a      	mov	r2, r3
 80053bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e008      	b.n	80053d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	2300      	movs	r3, #0
 80053d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	461a      	mov	r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	3301      	adds	r3, #1
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	d3b7      	bcc.n	800537a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800540a:	2300      	movs	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	e043      	b.n	8005498 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005426:	d118      	bne.n	800545a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	461a      	mov	r2, r3
 800543c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e013      	b.n	800546c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	461a      	mov	r2, r3
 8005452:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	e008      	b.n	800546c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	461a      	mov	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	461a      	mov	r2, r3
 800548c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005490:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3301      	adds	r3, #1
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d3b7      	bcc.n	8005410 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f043 0210 	orr.w	r2, r3, #16
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <USB_DevInit+0x2c4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f043 0208 	orr.w	r2, r3, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d107      	bne.n	8005508 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005500:	f043 0304 	orr.w	r3, r3, #4
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005514:	b004      	add	sp, #16
 8005516:	4770      	bx	lr
 8005518:	803c3800 	.word	0x803c3800

0800551c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	019b      	lsls	r3, r3, #6
 800552e:	f043 0220 	orr.w	r2, r3, #32
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	4a08      	ldr	r2, [pc, #32]	; (8005560 <USB_FlushTxFifo+0x44>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d901      	bls.n	8005546 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e006      	b.n	8005554 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d0f1      	beq.n	8005536 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	00030d40 	.word	0x00030d40

08005564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2210      	movs	r2, #16
 8005574:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3301      	adds	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	4a08      	ldr	r2, [pc, #32]	; (80055a0 <USB_FlushRxFifo+0x3c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e006      	b.n	8005594 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b10      	cmp	r3, #16
 8005590:	d0f1      	beq.n	8005576 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	00030d40 	.word	0x00030d40

080055a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c4:	4313      	orrs	r3, r2
 80055c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 0306 	and.w	r3, r3, #6
 80055ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055f6:	2300      	movs	r3, #0
 80055f8:	75fb      	strb	r3, [r7, #23]
 80055fa:	e00a      	b.n	8005612 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d002      	beq.n	8005608 <USB_GetDevSpeed+0x32>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b06      	cmp	r3, #6
 8005606:	d102      	bne.n	800560e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005608:	2302      	movs	r3, #2
 800560a:	75fb      	strb	r3, [r7, #23]
 800560c:	e001      	b.n	8005612 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800560e:	230f      	movs	r3, #15
 8005610:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005612:	7dfb      	ldrb	r3, [r7, #23]
}
 8005614:	4618      	mov	r0, r3
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d13a      	bne.n	80056b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	2101      	movs	r1, #1
 800564e:	fa01 f303 	lsl.w	r3, r1, r3
 8005652:	b29b      	uxth	r3, r3
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800565a:	4313      	orrs	r3, r2
 800565c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d155      	bne.n	8005720 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005690:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	059b      	lsls	r3, r3, #22
 8005696:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005698:	4313      	orrs	r3, r2
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	0151      	lsls	r1, r2, #5
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	440a      	add	r2, r1
 80056a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	e036      	b.n	8005720 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	2101      	movs	r1, #1
 80056c4:	fa01 f303 	lsl.w	r3, r1, r3
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11a      	bne.n	8005720 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	78db      	ldrb	r3, [r3, #3]
 8005704:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005706:	430b      	orrs	r3, r1
 8005708:	4313      	orrs	r3, r2
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	0151      	lsls	r1, r2, #5
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	440a      	add	r2, r1
 8005712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800571e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d161      	bne.n	8005810 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800575e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005762:	d11f      	bne.n	80057a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	0151      	lsls	r1, r2, #5
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	440a      	add	r2, r1
 800577a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005782:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	2101      	movs	r1, #1
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	43db      	mvns	r3, r3
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057c4:	4013      	ands	r3, r2
 80057c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	2101      	movs	r1, #1
 80057da:	fa01 f303 	lsl.w	r3, r1, r3
 80057de:	b29b      	uxth	r3, r3
 80057e0:	43db      	mvns	r3, r3
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057e8:	4013      	ands	r3, r2
 80057ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	0159      	lsls	r1, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	440b      	add	r3, r1
 8005802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005806:	4619      	mov	r1, r3
 8005808:	4b35      	ldr	r3, [pc, #212]	; (80058e0 <USB_DeactivateEndpoint+0x1b0>)
 800580a:	4013      	ands	r3, r2
 800580c:	600b      	str	r3, [r1, #0]
 800580e:	e060      	b.n	80058d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005826:	d11f      	bne.n	8005868 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005846:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	2101      	movs	r1, #1
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	43db      	mvns	r3, r3
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005888:	4013      	ands	r3, r2
 800588a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	2101      	movs	r1, #1
 800589e:	fa01 f303 	lsl.w	r3, r1, r3
 80058a2:	041b      	lsls	r3, r3, #16
 80058a4:	43db      	mvns	r3, r3
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ac:	4013      	ands	r3, r2
 80058ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	0159      	lsls	r1, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	440b      	add	r3, r1
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	4619      	mov	r1, r3
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <USB_DeactivateEndpoint+0x1b4>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	ec337800 	.word	0xec337800
 80058e4:	eff37800 	.word	0xeff37800

080058e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	785b      	ldrb	r3, [r3, #1]
 8005904:	2b01      	cmp	r3, #1
 8005906:	f040 815c 	bne.w	8005bc2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d132      	bne.n	8005978 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005930:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005934:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005970:	0cdb      	lsrs	r3, r3, #19
 8005972:	04db      	lsls	r3, r3, #19
 8005974:	6113      	str	r3, [r2, #16]
 8005976:	e074      	b.n	8005a62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	440a      	add	r2, r1
 800598e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005992:	0cdb      	lsrs	r3, r3, #19
 8005994:	04db      	lsls	r3, r3, #19
 8005996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6959      	ldr	r1, [r3, #20]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	440b      	add	r3, r1
 80059d4:	1e59      	subs	r1, r3, #1
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	fbb1 f3f3 	udiv	r3, r1, r3
 80059de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059e0:	4b9d      	ldr	r3, [pc, #628]	; (8005c58 <USB_EPStartXfer+0x370>)
 80059e2:	400b      	ands	r3, r1
 80059e4:	69b9      	ldr	r1, [r7, #24]
 80059e6:	0148      	lsls	r0, r1, #5
 80059e8:	69f9      	ldr	r1, [r7, #28]
 80059ea:	4401      	add	r1, r0
 80059ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059f0:	4313      	orrs	r3, r2
 80059f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0a:	69b9      	ldr	r1, [r7, #24]
 8005a0c:	0148      	lsls	r0, r1, #5
 8005a0e:	69f9      	ldr	r1, [r7, #28]
 8005a10:	4401      	add	r1, r0
 8005a12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a16:	4313      	orrs	r3, r2
 8005a18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	78db      	ldrb	r3, [r3, #3]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d11f      	bne.n	8005a62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	0151      	lsls	r1, r2, #5
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	440a      	add	r2, r1
 8005a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	0151      	lsls	r1, r2, #5
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	440a      	add	r2, r1
 8005a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d14b      	bne.n	8005b00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d009      	beq.n	8005a84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	78db      	ldrb	r3, [r3, #3]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d128      	bne.n	8005ade <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d110      	bne.n	8005abe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	e00f      	b.n	8005ade <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005adc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e12f      	b.n	8005d60 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	78db      	ldrb	r3, [r3, #3]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d015      	beq.n	8005b54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8117 	beq.w	8005d60 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	2101      	movs	r1, #1
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	69f9      	ldr	r1, [r7, #28]
 8005b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	634b      	str	r3, [r1, #52]	; 0x34
 8005b52:	e105      	b.n	8005d60 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d110      	bne.n	8005b86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	e00f      	b.n	8005ba6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	68d9      	ldr	r1, [r3, #12]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	781a      	ldrb	r2, [r3, #0]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	b298      	uxth	r0, r3
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4603      	mov	r3, r0
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 fa2b 	bl	8006016 <USB_WritePacket>
 8005bc0:	e0ce      	b.n	8005d60 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bdc:	0cdb      	lsrs	r3, r3, #19
 8005bde:	04db      	lsls	r3, r3, #19
 8005be0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d126      	bne.n	8005c5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c24:	69b9      	ldr	r1, [r7, #24]
 8005c26:	0148      	lsls	r0, r1, #5
 8005c28:	69f9      	ldr	r1, [r7, #28]
 8005c2a:	4401      	add	r1, r0
 8005c2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c30:	4313      	orrs	r3, r2
 8005c32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c52:	6113      	str	r3, [r2, #16]
 8005c54:	e036      	b.n	8005cc4 <USB_EPStartXfer+0x3dc>
 8005c56:	bf00      	nop
 8005c58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	4413      	add	r3, r2
 8005c66:	1e5a      	subs	r2, r3, #1
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	8afb      	ldrh	r3, [r7, #22]
 8005c82:	04d9      	lsls	r1, r3, #19
 8005c84:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <USB_EPStartXfer+0x484>)
 8005c86:	400b      	ands	r3, r1
 8005c88:	69b9      	ldr	r1, [r7, #24]
 8005c8a:	0148      	lsls	r0, r1, #5
 8005c8c:	69f9      	ldr	r1, [r7, #28]
 8005c8e:	4401      	add	r1, r0
 8005c90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c94:	4313      	orrs	r3, r2
 8005c96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	8af9      	ldrh	r1, [r7, #22]
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb4:	69b9      	ldr	r1, [r7, #24]
 8005cb6:	0148      	lsls	r0, r1, #5
 8005cb8:	69f9      	ldr	r1, [r7, #28]
 8005cba:	4401      	add	r1, r0
 8005cbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d10d      	bne.n	8005ce6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	68d9      	ldr	r1, [r3, #12]
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	460a      	mov	r2, r1
 8005ce4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	78db      	ldrb	r3, [r3, #3]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d128      	bne.n	8005d40 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d110      	bne.n	8005d20 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e00f      	b.n	8005d40 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	1ff80000 	.word	0x1ff80000

08005d70 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	f040 80cd 	bne.w	8005f2c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d132      	bne.n	8005e00 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005db8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df8:	0cdb      	lsrs	r3, r3, #19
 8005dfa:	04db      	lsls	r3, r3, #19
 8005dfc:	6113      	str	r3, [r2, #16]
 8005dfe:	e04e      	b.n	8005e9e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1a:	0cdb      	lsrs	r3, r3, #19
 8005e1c:	04db      	lsls	r3, r3, #19
 8005e1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e42:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	695a      	ldr	r2, [r3, #20]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d903      	bls.n	8005e58 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e8e:	6939      	ldr	r1, [r7, #16]
 8005e90:	0148      	lsls	r0, r1, #5
 8005e92:	6979      	ldr	r1, [r7, #20]
 8005e94:	4401      	add	r1, r0
 8005e96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d11e      	bne.n	8005ee2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	461a      	mov	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	0151      	lsls	r1, r2, #5
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	e092      	b.n	8006008 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d07e      	beq.n	8006008 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f20:	6979      	ldr	r1, [r7, #20]
 8005f22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f26:	4313      	orrs	r3, r2
 8005f28:	634b      	str	r3, [r1, #52]	; 0x34
 8005f2a:	e06d      	b.n	8006008 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f46:	0cdb      	lsrs	r3, r3, #19
 8005f48:	04db      	lsls	r3, r3, #19
 8005f4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f6e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb6:	6939      	ldr	r1, [r7, #16]
 8005fb8:	0148      	lsls	r0, r1, #5
 8005fba:	6979      	ldr	r1, [r7, #20]
 8005fbc:	4401      	add	r1, r0
 8005fbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d10d      	bne.n	8005fe8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d009      	beq.n	8005fe8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	68d9      	ldr	r1, [r3, #12]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe4:	460a      	mov	r2, r1
 8005fe6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006002:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006006:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006016:	b480      	push	{r7}
 8006018:	b089      	sub	sp, #36	; 0x24
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	4611      	mov	r1, r2
 8006022:	461a      	mov	r2, r3
 8006024:	460b      	mov	r3, r1
 8006026:	71fb      	strb	r3, [r7, #7]
 8006028:	4613      	mov	r3, r2
 800602a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006034:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006038:	2b00      	cmp	r3, #0
 800603a:	d123      	bne.n	8006084 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800603c:	88bb      	ldrh	r3, [r7, #4]
 800603e:	3303      	adds	r3, #3
 8006040:	089b      	lsrs	r3, r3, #2
 8006042:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	e018      	b.n	800607c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	031a      	lsls	r2, r3, #12
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	4413      	add	r3, r2
 8006052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006056:	461a      	mov	r2, r3
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	3301      	adds	r3, #1
 8006062:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	3301      	adds	r3, #1
 8006068:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3301      	adds	r3, #1
 800606e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	3301      	adds	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	3301      	adds	r3, #1
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	429a      	cmp	r2, r3
 8006082:	d3e2      	bcc.n	800604a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3724      	adds	r7, #36	; 0x24
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006092:	b480      	push	{r7}
 8006094:	b08b      	sub	sp, #44	; 0x2c
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	4613      	mov	r3, r2
 800609e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	089b      	lsrs	r3, r3, #2
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060b8:	2300      	movs	r3, #0
 80060ba:	623b      	str	r3, [r7, #32]
 80060bc:	e014      	b.n	80060e8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	601a      	str	r2, [r3, #0]
    pDest++;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	3301      	adds	r3, #1
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	3301      	adds	r3, #1
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	3301      	adds	r3, #1
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	3301      	adds	r3, #1
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	3301      	adds	r3, #1
 80060e6:	623b      	str	r3, [r7, #32]
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d3e6      	bcc.n	80060be <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060f0:	8bfb      	ldrh	r3, [r7, #30]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01e      	beq.n	8006134 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006100:	461a      	mov	r2, r3
 8006102:	f107 0310 	add.w	r3, r7, #16
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	b2da      	uxtb	r2, r3
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	701a      	strb	r2, [r3, #0]
      i++;
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	3301      	adds	r3, #1
 8006120:	623b      	str	r3, [r7, #32]
      pDest++;
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	3301      	adds	r3, #1
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006128:	8bfb      	ldrh	r3, [r7, #30]
 800612a:	3b01      	subs	r3, #1
 800612c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800612e:	8bfb      	ldrh	r3, [r7, #30]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1ea      	bne.n	800610a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006136:	4618      	mov	r0, r3
 8006138:	372c      	adds	r7, #44	; 0x2c
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d12c      	bne.n	80061b8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	db12      	blt.n	8006196 <USB_EPSetStall+0x54>
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00f      	beq.n	8006196 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	440a      	add	r2, r1
 800618c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006190:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006194:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	e02b      	b.n	8006210 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	db12      	blt.n	80061f0 <USB_EPSetStall+0xae>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00f      	beq.n	80061f0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061ee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800620e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d128      	bne.n	800628c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006258:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	78db      	ldrb	r3, [r3, #3]
 800625e:	2b03      	cmp	r3, #3
 8006260:	d003      	beq.n	800626a <USB_EPClearStall+0x4c>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	78db      	ldrb	r3, [r3, #3]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d138      	bne.n	80062dc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e027      	b.n	80062dc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	78db      	ldrb	r3, [r3, #3]
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d003      	beq.n	80062bc <USB_EPClearStall+0x9e>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	78db      	ldrb	r3, [r3, #3]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d10f      	bne.n	80062dc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062da:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006308:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800630c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800631e:	68f9      	ldr	r1, [r7, #12]
 8006320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006324:	4313      	orrs	r3, r2
 8006326:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006350:	f023 0303 	bic.w	r3, r3, #3
 8006354:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006364:	f023 0302 	bic.w	r3, r3, #2
 8006368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063a6:	f043 0302 	orr.w	r3, r3, #2
 80063aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4013      	ands	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063d2:	68fb      	ldr	r3, [r7, #12]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	4013      	ands	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	0c1b      	lsrs	r3, r3, #16
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	4013      	ands	r3, r2
 8006436:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	b29b      	uxth	r3, r3
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	4013      	ands	r3, r2
 8006474:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006476:	68bb      	ldr	r3, [r7, #8]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
 80064b4:	01db      	lsls	r3, r3, #7
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4013      	ands	r3, r2
 80064d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064d2:	68bb      	ldr	r3, [r7, #8]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	f003 0301 	and.w	r3, r3, #1
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006516:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800651a:	f023 0307 	bic.w	r3, r3, #7
 800651e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800652e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006532:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	460b      	mov	r3, r1
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	333c      	adds	r3, #60	; 0x3c
 800655a:	3304      	adds	r3, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	4a26      	ldr	r2, [pc, #152]	; (80065fc <USB_EP0_OutStart+0xb8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d90a      	bls.n	800657e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006578:	d101      	bne.n	800657e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	e037      	b.n	80065ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	461a      	mov	r2, r3
 8006586:	2300      	movs	r3, #0
 8006588:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800659c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ac:	f043 0318 	orr.w	r3, r3, #24
 80065b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d10f      	bne.n	80065ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	461a      	mov	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	4f54300a 	.word	0x4f54300a

08006600 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	4a13      	ldr	r2, [pc, #76]	; (8006660 <USB_CoreReset+0x60>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d901      	bls.n	800661c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e01a      	b.n	8006652 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	daf3      	bge.n	800660c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f043 0201 	orr.w	r2, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	4a09      	ldr	r2, [pc, #36]	; (8006660 <USB_CoreReset+0x60>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d901      	bls.n	8006644 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e006      	b.n	8006652 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b01      	cmp	r3, #1
 800664e:	d0f1      	beq.n	8006634 <USB_CoreReset+0x34>

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	00030d40 	.word	0x00030d40

08006664 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006668:	4904      	ldr	r1, [pc, #16]	; (800667c <MX_FATFS_Init+0x18>)
 800666a:	4805      	ldr	r0, [pc, #20]	; (8006680 <MX_FATFS_Init+0x1c>)
 800666c:	f001 fe44 	bl	80082f8 <FATFS_LinkDriver>
 8006670:	4603      	mov	r3, r0
 8006672:	461a      	mov	r2, r3
 8006674:	4b03      	ldr	r3, [pc, #12]	; (8006684 <MX_FATFS_Init+0x20>)
 8006676:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006678:	bf00      	nop
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20000504 	.word	0x20000504
 8006680:	08008dc8 	.word	0x08008dc8
 8006684:	20000500 	.word	0x20000500

08006688 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006692:	f000 f879 	bl	8006788 <BSP_SD_IsDetected>
 8006696:	4603      	mov	r3, r0
 8006698:	2b01      	cmp	r3, #1
 800669a:	d001      	beq.n	80066a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e012      	b.n	80066c6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80066a0:	480b      	ldr	r0, [pc, #44]	; (80066d0 <BSP_SD_Init+0x48>)
 80066a2:	f7fc fce1 	bl	8003068 <HAL_SD_Init>
 80066a6:	4603      	mov	r3, r0
 80066a8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d109      	bne.n	80066c4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80066b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066b4:	4806      	ldr	r0, [pc, #24]	; (80066d0 <BSP_SD_Init+0x48>)
 80066b6:	f7fd fab9 	bl	8003c2c <HAL_SD_ConfigWideBusOperation>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80066c4:	79fb      	ldrb	r3, [r7, #7]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000420 	.word	0x20000420

080066d4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	4806      	ldr	r0, [pc, #24]	; (800670c <BSP_SD_ReadBlocks+0x38>)
 80066f2:	f7fc fd67 	bl	80031c4 <HAL_SD_ReadBlocks>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006700:	7dfb      	ldrb	r3, [r7, #23]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000420 	.word	0x20000420

08006710 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	4806      	ldr	r0, [pc, #24]	; (8006748 <BSP_SD_WriteBlocks+0x38>)
 800672e:	f7fc ff27 	bl	8003580 <HAL_SD_WriteBlocks>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800673c:	7dfb      	ldrb	r3, [r7, #23]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000420 	.word	0x20000420

0800674c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006750:	4805      	ldr	r0, [pc, #20]	; (8006768 <BSP_SD_GetCardState+0x1c>)
 8006752:	f7fd fb05 	bl	8003d60 <HAL_SD_GetCardState>
 8006756:	4603      	mov	r3, r0
 8006758:	2b04      	cmp	r3, #4
 800675a:	bf14      	ite	ne
 800675c:	2301      	movne	r3, #1
 800675e:	2300      	moveq	r3, #0
 8006760:	b2db      	uxtb	r3, r3
}
 8006762:	4618      	mov	r0, r3
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000420 	.word	0x20000420

0800676c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4803      	ldr	r0, [pc, #12]	; (8006784 <BSP_SD_GetCardInfo+0x18>)
 8006778:	f7fd fa2c 	bl	8003bd4 <HAL_SD_GetCardInfo>
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20000420 	.word	0x20000420

08006788 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800678e:	2301      	movs	r3, #1
 8006790:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006792:	f000 f80b 	bl	80067ac <BSP_PlatformIsDetected>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800679c:	2300      	movs	r3, #0
 800679e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80067a0:	79fb      	ldrb	r3, [r7, #7]
 80067a2:	b2db      	uxtb	r3, r3
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80067b2:	2301      	movs	r3, #1
 80067b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80067b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067ba:	4806      	ldr	r0, [pc, #24]	; (80067d4 <BSP_PlatformIsDetected+0x28>)
 80067bc:	f7fa fcfa 	bl	80011b4 <HAL_GPIO_ReadPin>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80067c6:	2300      	movs	r3, #0
 80067c8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80067ca:	79fb      	ldrb	r3, [r7, #7]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40020000 	.word	0x40020000

080067d8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <SD_CheckStatus+0x38>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80067e8:	f7ff ffb0 	bl	800674c <BSP_SD_GetCardState>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d107      	bne.n	8006802 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80067f2:	4b07      	ldr	r3, [pc, #28]	; (8006810 <SD_CheckStatus+0x38>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <SD_CheckStatus+0x38>)
 8006800:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006802:	4b03      	ldr	r3, [pc, #12]	; (8006810 <SD_CheckStatus+0x38>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	b2db      	uxtb	r3, r3
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20000009 	.word	0x20000009

08006814 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <SD_initialize+0x38>)
 8006820:	2201      	movs	r2, #1
 8006822:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006824:	f7ff ff30 	bl	8006688 <BSP_SD_Init>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d107      	bne.n	800683e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff ffd1 	bl	80067d8 <SD_CheckStatus>
 8006836:	4603      	mov	r3, r0
 8006838:	461a      	mov	r2, r3
 800683a:	4b04      	ldr	r3, [pc, #16]	; (800684c <SD_initialize+0x38>)
 800683c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800683e:	4b03      	ldr	r3, [pc, #12]	; (800684c <SD_initialize+0x38>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	b2db      	uxtb	r3, r3
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000009 	.word	0x20000009

08006850 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff ffbb 	bl	80067d8 <SD_CheckStatus>
 8006862:	4603      	mov	r3, r0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	68b8      	ldr	r0, [r7, #8]
 800688a:	f7ff ff23 	bl	80066d4 <BSP_SD_ReadBlocks>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d107      	bne.n	80068a4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006894:	bf00      	nop
 8006896:	f7ff ff59 	bl	800674c <BSP_SD_GetCardState>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1fa      	bne.n	8006896 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b086      	sub	sp, #24
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
 80068ba:	4603      	mov	r3, r0
 80068bc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80068c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	68b8      	ldr	r0, [r7, #8]
 80068cc:	f7ff ff20 	bl	8006710 <BSP_SD_WriteBlocks>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d107      	bne.n	80068e6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80068d6:	bf00      	nop
 80068d8:	f7ff ff38 	bl	800674c <BSP_SD_GetCardState>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1fa      	bne.n	80068d8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08c      	sub	sp, #48	; 0x30
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	603a      	str	r2, [r7, #0]
 80068fa:	71fb      	strb	r3, [r7, #7]
 80068fc:	460b      	mov	r3, r1
 80068fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006906:	4b25      	ldr	r3, [pc, #148]	; (800699c <SD_ioctl+0xac>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <SD_ioctl+0x28>
 8006914:	2303      	movs	r3, #3
 8006916:	e03c      	b.n	8006992 <SD_ioctl+0xa2>

  switch (cmd)
 8006918:	79bb      	ldrb	r3, [r7, #6]
 800691a:	2b03      	cmp	r3, #3
 800691c:	d834      	bhi.n	8006988 <SD_ioctl+0x98>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <SD_ioctl+0x34>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	08006935 	.word	0x08006935
 8006928:	0800693d 	.word	0x0800693d
 800692c:	08006955 	.word	0x08006955
 8006930:	0800696f 	.word	0x0800696f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800693a:	e028      	b.n	800698e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800693c:	f107 030c 	add.w	r3, r7, #12
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff ff13 	bl	800676c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006952:	e01c      	b.n	800698e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006954:	f107 030c 	add.w	r3, r7, #12
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff ff07 	bl	800676c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	b29a      	uxth	r2, r3
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800696c:	e00f      	b.n	800698e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800696e:	f107 030c 	add.w	r3, r7, #12
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff fefa 	bl	800676c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	0a5a      	lsrs	r2, r3, #9
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006986:	e002      	b.n	800698e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006988:	2304      	movs	r3, #4
 800698a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800698e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006992:	4618      	mov	r0, r3
 8006994:	3730      	adds	r7, #48	; 0x30
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000009 	.word	0x20000009

080069a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069b0:	f002 f962 	bl	8008c78 <USBD_static_malloc>
 80069b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80069c4:	2302      	movs	r3, #2
 80069c6:	e066      	b.n	8006a96 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7c1b      	ldrb	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d119      	bne.n	8006a0c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069dc:	2202      	movs	r2, #2
 80069de:	2181      	movs	r1, #129	; 0x81
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f002 f826 	bl	8008a32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f0:	2202      	movs	r2, #2
 80069f2:	2101      	movs	r1, #1
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f002 f81c 	bl	8008a32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2210      	movs	r2, #16
 8006a06:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006a0a:	e016      	b.n	8006a3a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a0c:	2340      	movs	r3, #64	; 0x40
 8006a0e:	2202      	movs	r2, #2
 8006a10:	2181      	movs	r1, #129	; 0x81
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f002 f80d 	bl	8008a32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	2202      	movs	r2, #2
 8006a22:	2101      	movs	r1, #1
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f002 f804 	bl	8008a32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2210      	movs	r2, #16
 8006a36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	2182      	movs	r1, #130	; 0x82
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fff6 	bl	8008a32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	7c1b      	ldrb	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d109      	bne.n	8006a84 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f002 f8c7 	bl	8008c10 <USBD_LL_PrepareReceive>
 8006a82:	e007      	b.n	8006a94 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a8a:	2340      	movs	r3, #64	; 0x40
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f002 f8be 	bl	8008c10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006aaa:	2181      	movs	r1, #129	; 0x81
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 ffe6 	bl	8008a7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ab8:	2101      	movs	r1, #1
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 ffdf 	bl	8008a7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ac8:	2182      	movs	r1, #130	; 0x82
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 ffd7 	bl	8008a7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00e      	beq.n	8006b08 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006afa:	4618      	mov	r0, r3
 8006afc:	f002 f8ca 	bl	8008c94 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e0af      	b.n	8006c9c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d03f      	beq.n	8006bc8 <USBD_CDC_Setup+0xb4>
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	f040 809f 	bne.w	8006c8c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	88db      	ldrh	r3, [r3, #6]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d02e      	beq.n	8006bb4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	b25b      	sxtb	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	da16      	bge.n	8006b8e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006b6c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	88d2      	ldrh	r2, [r2, #6]
 8006b72:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	88db      	ldrh	r3, [r3, #6]
 8006b78:	2b07      	cmp	r3, #7
 8006b7a:	bf28      	it	cs
 8006b7c:	2307      	movcs	r3, #7
 8006b7e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	89fa      	ldrh	r2, [r7, #14]
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 fae9 	bl	800815e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006b8c:	e085      	b.n	8006c9a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	785a      	ldrb	r2, [r3, #1]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	88db      	ldrh	r3, [r3, #6]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ba4:	6939      	ldr	r1, [r7, #16]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	88db      	ldrh	r3, [r3, #6]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 fb02 	bl	80081b6 <USBD_CtlPrepareRx>
      break;
 8006bb2:	e072      	b.n	8006c9a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	7850      	ldrb	r0, [r2, #1]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	4798      	blx	r3
      break;
 8006bc6:	e068      	b.n	8006c9a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b0b      	cmp	r3, #11
 8006bce:	d852      	bhi.n	8006c76 <USBD_CDC_Setup+0x162>
 8006bd0:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <USBD_CDC_Setup+0xc4>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006c09 	.word	0x08006c09
 8006bdc:	08006c85 	.word	0x08006c85
 8006be0:	08006c77 	.word	0x08006c77
 8006be4:	08006c77 	.word	0x08006c77
 8006be8:	08006c77 	.word	0x08006c77
 8006bec:	08006c77 	.word	0x08006c77
 8006bf0:	08006c77 	.word	0x08006c77
 8006bf4:	08006c77 	.word	0x08006c77
 8006bf8:	08006c77 	.word	0x08006c77
 8006bfc:	08006c77 	.word	0x08006c77
 8006c00:	08006c33 	.word	0x08006c33
 8006c04:	08006c5d 	.word	0x08006c5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d107      	bne.n	8006c24 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c14:	f107 030a 	add.w	r3, r7, #10
 8006c18:	2202      	movs	r2, #2
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fa9e 	bl	800815e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c22:	e032      	b.n	8006c8a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fa28 	bl	800807c <USBD_CtlError>
            ret = USBD_FAIL;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	75fb      	strb	r3, [r7, #23]
          break;
 8006c30:	e02b      	b.n	8006c8a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d107      	bne.n	8006c4e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c3e:	f107 030d 	add.w	r3, r7, #13
 8006c42:	2201      	movs	r2, #1
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 fa89 	bl	800815e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c4c:	e01d      	b.n	8006c8a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fa13 	bl	800807c <USBD_CtlError>
            ret = USBD_FAIL;
 8006c56:	2303      	movs	r3, #3
 8006c58:	75fb      	strb	r3, [r7, #23]
          break;
 8006c5a:	e016      	b.n	8006c8a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d00f      	beq.n	8006c88 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fa06 	bl	800807c <USBD_CtlError>
            ret = USBD_FAIL;
 8006c70:	2303      	movs	r3, #3
 8006c72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c74:	e008      	b.n	8006c88 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 f9ff 	bl	800807c <USBD_CtlError>
          ret = USBD_FAIL;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	75fb      	strb	r3, [r7, #23]
          break;
 8006c82:	e002      	b.n	8006c8a <USBD_CDC_Setup+0x176>
          break;
 8006c84:	bf00      	nop
 8006c86:	e008      	b.n	8006c9a <USBD_CDC_Setup+0x186>
          break;
 8006c88:	bf00      	nop
      }
      break;
 8006c8a:	e006      	b.n	8006c9a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 f9f4 	bl	800807c <USBD_CtlError>
      ret = USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	75fb      	strb	r3, [r7, #23]
      break;
 8006c98:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e04f      	b.n	8006d66 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ccc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006cce:	78fa      	ldrb	r2, [r7, #3]
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	3318      	adds	r3, #24
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d029      	beq.n	8006d38 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ce4:	78fa      	ldrb	r2, [r7, #3]
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	3318      	adds	r3, #24
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	78f9      	ldrb	r1, [r7, #3]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	1a5b      	subs	r3, r3, r1
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4403      	add	r3, r0
 8006d04:	3344      	adds	r3, #68	; 0x44
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d0c:	fb03 f301 	mul.w	r3, r3, r1
 8006d10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d110      	bne.n	8006d38 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	3318      	adds	r3, #24
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d2a:	78f9      	ldrb	r1, [r7, #3]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	2200      	movs	r2, #0
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 ff4c 	bl	8008bce <USBD_LL_Transmit>
 8006d36:	e015      	b.n	8006d64 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e015      	b.n	8006dbc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 ff5c 	bl	8008c52 <USBD_LL_GetRxDataSize>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006db6:	4611      	mov	r1, r2
 8006db8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dd2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e01b      	b.n	8006e16 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d015      	beq.n	8006e14 <USBD_CDC_EP0_RxReady+0x50>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006dee:	2bff      	cmp	r3, #255	; 0xff
 8006df0:	d010      	beq.n	8006e14 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006e00:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e08:	b292      	uxth	r2, r2
 8006e0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	22ff      	movs	r2, #255	; 0xff
 8006e10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2243      	movs	r2, #67	; 0x43
 8006e2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006e2e:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	20000094 	.word	0x20000094

08006e40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2243      	movs	r2, #67	; 0x43
 8006e4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006e4e:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20000050 	.word	0x20000050

08006e60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2243      	movs	r2, #67	; 0x43
 8006e6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006e6e:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	200000d8 	.word	0x200000d8

08006e80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	220a      	movs	r2, #10
 8006e8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e8e:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	2000000c 	.word	0x2000000c

08006ea0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e004      	b.n	8006ebe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b087      	sub	sp, #28
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006edc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e008      	b.n	8006efa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f16:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e004      	b.n	8006f2c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e016      	b.n	8006f84 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	7c1b      	ldrb	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f68:	2101      	movs	r1, #1
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fe50 	bl	8008c10 <USBD_LL_PrepareReceive>
 8006f70:	e007      	b.n	8006f82 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f78:	2340      	movs	r3, #64	; 0x40
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fe47 	bl	8008c10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e01f      	b.n	8006fe4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	79fa      	ldrb	r2, [r7, #7]
 8006fd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f001 fcc3 	bl	8008964 <USBD_LL_Init>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007000:	2303      	movs	r3, #3
 8007002:	e016      	b.n	8007032 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	f107 020e 	add.w	r2, r7, #14
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	4602      	mov	r2, r0
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fcda 	bl	80089fc <USBD_LL_Start>
 8007048:	4603      	mov	r3, r0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	4611      	mov	r1, r2
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	4798      	blx	r3
 8007092:	4603      	mov	r3, r0
 8007094:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d007      	beq.n	80070c6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	78fa      	ldrb	r2, [r7, #3]
 80070c0:	4611      	mov	r1, r2
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
  }

  return USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 ff90 	bl	8008008 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070f6:	461a      	mov	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007104:	f003 031f 	and.w	r3, r3, #31
 8007108:	2b02      	cmp	r3, #2
 800710a:	d01a      	beq.n	8007142 <USBD_LL_SetupStage+0x72>
 800710c:	2b02      	cmp	r3, #2
 800710e:	d822      	bhi.n	8007156 <USBD_LL_SetupStage+0x86>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <USBD_LL_SetupStage+0x4a>
 8007114:	2b01      	cmp	r3, #1
 8007116:	d00a      	beq.n	800712e <USBD_LL_SetupStage+0x5e>
 8007118:	e01d      	b.n	8007156 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa62 	bl	80075ec <USBD_StdDevReq>
 8007128:	4603      	mov	r3, r0
 800712a:	73fb      	strb	r3, [r7, #15]
      break;
 800712c:	e020      	b.n	8007170 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fac6 	bl	80076c8 <USBD_StdItfReq>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
      break;
 8007140:	e016      	b.n	8007170 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fb05 	bl	800775a <USBD_StdEPReq>
 8007150:	4603      	mov	r3, r0
 8007152:	73fb      	strb	r3, [r7, #15]
      break;
 8007154:	e00c      	b.n	8007170 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800715c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007160:	b2db      	uxtb	r3, r3
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 fca9 	bl	8008abc <USBD_LL_StallEP>
 800716a:	4603      	mov	r3, r0
 800716c:	73fb      	strb	r3, [r7, #15]
      break;
 800716e:	bf00      	nop
  }

  return ret;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b086      	sub	sp, #24
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	460b      	mov	r3, r1
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007188:	7afb      	ldrb	r3, [r7, #11]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d138      	bne.n	8007200 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007194:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800719c:	2b03      	cmp	r3, #3
 800719e:	d14a      	bne.n	8007236 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d913      	bls.n	80071d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	1ad2      	subs	r2, r2, r3
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	4293      	cmp	r3, r2
 80071c4:	bf28      	it	cs
 80071c6:	4613      	movcs	r3, r2
 80071c8:	461a      	mov	r2, r3
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f001 f80f 	bl	80081f0 <USBD_CtlContinueRx>
 80071d2:	e030      	b.n	8007236 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d10b      	bne.n	80071f8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f001 f80a 	bl	8008212 <USBD_CtlSendStatus>
 80071fe:	e01a      	b.n	8007236 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b03      	cmp	r3, #3
 800720a:	d114      	bne.n	8007236 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00e      	beq.n	8007236 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	7afa      	ldrb	r2, [r7, #11]
 8007222:	4611      	mov	r1, r2
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	4798      	blx	r3
 8007228:	4603      	mov	r3, r0
 800722a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	e000      	b.n	8007238 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	460b      	mov	r3, r1
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d16b      	bne.n	800732c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3314      	adds	r3, #20
 8007258:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007260:	2b02      	cmp	r3, #2
 8007262:	d156      	bne.n	8007312 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	429a      	cmp	r2, r3
 800726e:	d914      	bls.n	800729a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	1ad2      	subs	r2, r2, r3
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	461a      	mov	r2, r3
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 ff84 	bl	8008194 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800728c:	2300      	movs	r3, #0
 800728e:	2200      	movs	r2, #0
 8007290:	2100      	movs	r1, #0
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f001 fcbc 	bl	8008c10 <USBD_LL_PrepareReceive>
 8007298:	e03b      	b.n	8007312 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d11c      	bne.n	80072e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d316      	bcc.n	80072e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072bc:	429a      	cmp	r2, r3
 80072be:	d20f      	bcs.n	80072e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072c0:	2200      	movs	r2, #0
 80072c2:	2100      	movs	r1, #0
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 ff65 	bl	8008194 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d2:	2300      	movs	r3, #0
 80072d4:	2200      	movs	r2, #0
 80072d6:	2100      	movs	r1, #0
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f001 fc99 	bl	8008c10 <USBD_LL_PrepareReceive>
 80072de:	e018      	b.n	8007312 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d10b      	bne.n	8007304 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007304:	2180      	movs	r1, #128	; 0x80
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f001 fbd8 	bl	8008abc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 ff93 	bl	8008238 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007318:	2b01      	cmp	r3, #1
 800731a:	d122      	bne.n	8007362 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fe98 	bl	8007052 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800732a:	e01a      	b.n	8007362 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b03      	cmp	r3, #3
 8007336:	d114      	bne.n	8007362 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00e      	beq.n	8007362 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	7afa      	ldrb	r2, [r7, #11]
 800734e:	4611      	mov	r1, r2
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	4798      	blx	r3
 8007354:	4603      	mov	r3, r0
 8007356:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	e000      	b.n	8007364 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	e02f      	b.n	8007400 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00f      	beq.n	80073ca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6852      	ldr	r2, [r2, #4]
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	4611      	mov	r1, r2
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073ca:	2340      	movs	r3, #64	; 0x40
 80073cc:	2200      	movs	r2, #0
 80073ce:	2100      	movs	r1, #0
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fb2e 	bl	8008a32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2240      	movs	r2, #64	; 0x40
 80073e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073e6:	2340      	movs	r3, #64	; 0x40
 80073e8:	2200      	movs	r2, #0
 80073ea:	2180      	movs	r1, #128	; 0x80
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 fb20 	bl	8008a32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2240      	movs	r2, #64	; 0x40
 80073fc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	78fa      	ldrb	r2, [r7, #3]
 8007418:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007436:	b2da      	uxtb	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2204      	movs	r2, #4
 8007442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b04      	cmp	r3, #4
 8007466:	d106      	bne.n	8007476 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800746e:	b2da      	uxtb	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007496:	2303      	movs	r3, #3
 8007498:	e012      	b.n	80074c0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d10b      	bne.n	80074be <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80074de:	2303      	movs	r3, #3
 80074e0:	e014      	b.n	800750c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d10d      	bne.n	800750a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d007      	beq.n	800750a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	4611      	mov	r1, r2
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800752a:	2303      	movs	r3, #3
 800752c:	e014      	b.n	8007558 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b03      	cmp	r3, #3
 8007538:	d10d      	bne.n	8007556 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	78fa      	ldrb	r2, [r7, #3]
 8007550:	4611      	mov	r1, r2
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758c:	2b00      	cmp	r3, #0
 800758e:	d009      	beq.n	80075a4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6852      	ldr	r2, [r2, #4]
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	4611      	mov	r1, r2
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	4798      	blx	r3
  }

  return USBD_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b087      	sub	sp, #28
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3301      	adds	r3, #1
 80075c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075cc:	8a3b      	ldrh	r3, [r7, #16]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	b21a      	sxth	r2, r3
 80075d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	b21b      	sxth	r3, r3
 80075da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075dc:	89fb      	ldrh	r3, [r7, #14]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d005      	beq.n	8007612 <USBD_StdDevReq+0x26>
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	d853      	bhi.n	80076b2 <USBD_StdDevReq+0xc6>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00b      	beq.n	8007626 <USBD_StdDevReq+0x3a>
 800760e:	2b20      	cmp	r3, #32
 8007610:	d14f      	bne.n	80076b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
      break;
 8007624:	e04a      	b.n	80076bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	2b09      	cmp	r3, #9
 800762c:	d83b      	bhi.n	80076a6 <USBD_StdDevReq+0xba>
 800762e:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <USBD_StdDevReq+0x48>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007689 	.word	0x08007689
 8007638:	0800769d 	.word	0x0800769d
 800763c:	080076a7 	.word	0x080076a7
 8007640:	08007693 	.word	0x08007693
 8007644:	080076a7 	.word	0x080076a7
 8007648:	08007667 	.word	0x08007667
 800764c:	0800765d 	.word	0x0800765d
 8007650:	080076a7 	.word	0x080076a7
 8007654:	0800767f 	.word	0x0800767f
 8007658:	08007671 	.word	0x08007671
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f9de 	bl	8007a20 <USBD_GetDescriptor>
          break;
 8007664:	e024      	b.n	80076b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fb43 	bl	8007cf4 <USBD_SetAddress>
          break;
 800766e:	e01f      	b.n	80076b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fb82 	bl	8007d7c <USBD_SetConfig>
 8007678:	4603      	mov	r3, r0
 800767a:	73fb      	strb	r3, [r7, #15]
          break;
 800767c:	e018      	b.n	80076b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fc21 	bl	8007ec8 <USBD_GetConfig>
          break;
 8007686:	e013      	b.n	80076b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fc52 	bl	8007f34 <USBD_GetStatus>
          break;
 8007690:	e00e      	b.n	80076b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fc81 	bl	8007f9c <USBD_SetFeature>
          break;
 800769a:	e009      	b.n	80076b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fc90 	bl	8007fc4 <USBD_ClrFeature>
          break;
 80076a4:	e004      	b.n	80076b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fce7 	bl	800807c <USBD_CtlError>
          break;
 80076ae:	bf00      	nop
      }
      break;
 80076b0:	e004      	b.n	80076bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fce1 	bl	800807c <USBD_CtlError>
      break;
 80076ba:	bf00      	nop
  }

  return ret;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop

080076c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076de:	2b40      	cmp	r3, #64	; 0x40
 80076e0:	d005      	beq.n	80076ee <USBD_StdItfReq+0x26>
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d82f      	bhi.n	8007746 <USBD_StdItfReq+0x7e>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <USBD_StdItfReq+0x26>
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d12b      	bne.n	8007746 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d81d      	bhi.n	8007738 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	889b      	ldrh	r3, [r3, #4]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b01      	cmp	r3, #1
 8007704:	d813      	bhi.n	800772e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
 8007714:	4603      	mov	r3, r0
 8007716:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	88db      	ldrh	r3, [r3, #6]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d110      	bne.n	8007742 <USBD_StdItfReq+0x7a>
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10d      	bne.n	8007742 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fd73 	bl	8008212 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800772c:	e009      	b.n	8007742 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fca3 	bl	800807c <USBD_CtlError>
          break;
 8007736:	e004      	b.n	8007742 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fc9e 	bl	800807c <USBD_CtlError>
          break;
 8007740:	e000      	b.n	8007744 <USBD_StdItfReq+0x7c>
          break;
 8007742:	bf00      	nop
      }
      break;
 8007744:	e004      	b.n	8007750 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fc97 	bl	800807c <USBD_CtlError>
      break;
 800774e:	bf00      	nop
  }

  return ret;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	889b      	ldrh	r3, [r3, #4]
 800776c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	d007      	beq.n	800778a <USBD_StdEPReq+0x30>
 800777a:	2b40      	cmp	r3, #64	; 0x40
 800777c:	f200 8145 	bhi.w	8007a0a <USBD_StdEPReq+0x2b0>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00c      	beq.n	800779e <USBD_StdEPReq+0x44>
 8007784:	2b20      	cmp	r3, #32
 8007786:	f040 8140 	bne.w	8007a0a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
 8007798:	4603      	mov	r3, r0
 800779a:	73fb      	strb	r3, [r7, #15]
      break;
 800779c:	e13a      	b.n	8007a14 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d007      	beq.n	80077b6 <USBD_StdEPReq+0x5c>
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	f300 8129 	bgt.w	80079fe <USBD_StdEPReq+0x2a4>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d07f      	beq.n	80078b0 <USBD_StdEPReq+0x156>
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d03c      	beq.n	800782e <USBD_StdEPReq+0xd4>
 80077b4:	e123      	b.n	80079fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d002      	beq.n	80077c8 <USBD_StdEPReq+0x6e>
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d016      	beq.n	80077f4 <USBD_StdEPReq+0x9a>
 80077c6:	e02c      	b.n	8007822 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00d      	beq.n	80077ea <USBD_StdEPReq+0x90>
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b80      	cmp	r3, #128	; 0x80
 80077d2:	d00a      	beq.n	80077ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 f96f 	bl	8008abc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077de:	2180      	movs	r1, #128	; 0x80
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 f96b 	bl	8008abc <USBD_LL_StallEP>
 80077e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077e8:	e020      	b.n	800782c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fc45 	bl	800807c <USBD_CtlError>
              break;
 80077f2:	e01b      	b.n	800782c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	885b      	ldrh	r3, [r3, #2]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10e      	bne.n	800781a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <USBD_StdEPReq+0xc0>
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b80      	cmp	r3, #128	; 0x80
 8007806:	d008      	beq.n	800781a <USBD_StdEPReq+0xc0>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	88db      	ldrh	r3, [r3, #6]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 f951 	bl	8008abc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fcf9 	bl	8008212 <USBD_CtlSendStatus>

              break;
 8007820:	e004      	b.n	800782c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fc29 	bl	800807c <USBD_CtlError>
              break;
 800782a:	bf00      	nop
          }
          break;
 800782c:	e0ec      	b.n	8007a08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b02      	cmp	r3, #2
 8007838:	d002      	beq.n	8007840 <USBD_StdEPReq+0xe6>
 800783a:	2b03      	cmp	r3, #3
 800783c:	d016      	beq.n	800786c <USBD_StdEPReq+0x112>
 800783e:	e030      	b.n	80078a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00d      	beq.n	8007862 <USBD_StdEPReq+0x108>
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d00a      	beq.n	8007862 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 f933 	bl	8008abc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007856:	2180      	movs	r1, #128	; 0x80
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f92f 	bl	8008abc <USBD_LL_StallEP>
 800785e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007860:	e025      	b.n	80078ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fc09 	bl	800807c <USBD_CtlError>
              break;
 800786a:	e020      	b.n	80078ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	885b      	ldrh	r3, [r3, #2]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d11b      	bne.n	80078ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787a:	2b00      	cmp	r3, #0
 800787c:	d004      	beq.n	8007888 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f939 	bl	8008afa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fcc2 	bl	8008212 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80078a0:	e004      	b.n	80078ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fbe9 	bl	800807c <USBD_CtlError>
              break;
 80078aa:	e000      	b.n	80078ae <USBD_StdEPReq+0x154>
              break;
 80078ac:	bf00      	nop
          }
          break;
 80078ae:	e0ab      	b.n	8007a08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d002      	beq.n	80078c2 <USBD_StdEPReq+0x168>
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d032      	beq.n	8007926 <USBD_StdEPReq+0x1cc>
 80078c0:	e097      	b.n	80079f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d007      	beq.n	80078d8 <USBD_StdEPReq+0x17e>
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b80      	cmp	r3, #128	; 0x80
 80078cc:	d004      	beq.n	80078d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fbd3 	bl	800807c <USBD_CtlError>
                break;
 80078d6:	e091      	b.n	80079fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	da0b      	bge.n	80078f8 <USBD_StdEPReq+0x19e>
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	3310      	adds	r3, #16
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	4413      	add	r3, r2
 80078f4:	3304      	adds	r3, #4
 80078f6:	e00b      	b.n	8007910 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	3304      	adds	r3, #4
 8007910:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2202      	movs	r2, #2
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fc1d 	bl	800815e <USBD_CtlSendData>
              break;
 8007924:	e06a      	b.n	80079fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800792a:	2b00      	cmp	r3, #0
 800792c:	da11      	bge.n	8007952 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	f003 020f 	and.w	r2, r3, #15
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	4613      	mov	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	3324      	adds	r3, #36	; 0x24
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d117      	bne.n	8007978 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb96 	bl	800807c <USBD_CtlError>
                  break;
 8007950:	e054      	b.n	80079fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	f003 020f 	and.w	r2, r3, #15
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d104      	bne.n	8007978 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fb83 	bl	800807c <USBD_CtlError>
                  break;
 8007976:	e041      	b.n	80079fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	da0b      	bge.n	8007998 <USBD_StdEPReq+0x23e>
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	3310      	adds	r3, #16
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	3304      	adds	r3, #4
 8007996:	e00b      	b.n	80079b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	4413      	add	r3, r2
 80079ae:	3304      	adds	r3, #4
 80079b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <USBD_StdEPReq+0x264>
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b80      	cmp	r3, #128	; 0x80
 80079bc:	d103      	bne.n	80079c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e00e      	b.n	80079e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 f8b4 	bl	8008b38 <USBD_LL_IsStallEP>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2201      	movs	r2, #1
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	e002      	b.n	80079e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2202      	movs	r2, #2
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fbb7 	bl	800815e <USBD_CtlSendData>
              break;
 80079f0:	e004      	b.n	80079fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fb41 	bl	800807c <USBD_CtlError>
              break;
 80079fa:	bf00      	nop
          }
          break;
 80079fc:	e004      	b.n	8007a08 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fb3b 	bl	800807c <USBD_CtlError>
          break;
 8007a06:	bf00      	nop
      }
      break;
 8007a08:	e004      	b.n	8007a14 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fb35 	bl	800807c <USBD_CtlError>
      break;
 8007a12:	bf00      	nop
  }

  return ret;
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	885b      	ldrh	r3, [r3, #2]
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	2b06      	cmp	r3, #6
 8007a42:	f200 8128 	bhi.w	8007c96 <USBD_GetDescriptor+0x276>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <USBD_GetDescriptor+0x2c>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a69 	.word	0x08007a69
 8007a50:	08007a81 	.word	0x08007a81
 8007a54:	08007ac1 	.word	0x08007ac1
 8007a58:	08007c97 	.word	0x08007c97
 8007a5c:	08007c97 	.word	0x08007c97
 8007a60:	08007c37 	.word	0x08007c37
 8007a64:	08007c63 	.word	0x08007c63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	7c12      	ldrb	r2, [r2, #16]
 8007a74:	f107 0108 	add.w	r1, r7, #8
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4798      	blx	r3
 8007a7c:	60f8      	str	r0, [r7, #12]
      break;
 8007a7e:	e112      	b.n	8007ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	7c1b      	ldrb	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10d      	bne.n	8007aa4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f107 0208 	add.w	r2, r7, #8
 8007a94:	4610      	mov	r0, r2
 8007a96:	4798      	blx	r3
 8007a98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007aa2:	e100      	b.n	8007ca6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	f107 0208 	add.w	r2, r7, #8
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4798      	blx	r3
 8007ab4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	2202      	movs	r2, #2
 8007abc:	701a      	strb	r2, [r3, #0]
      break;
 8007abe:	e0f2      	b.n	8007ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	885b      	ldrh	r3, [r3, #2]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b05      	cmp	r3, #5
 8007ac8:	f200 80ac 	bhi.w	8007c24 <USBD_GetDescriptor+0x204>
 8007acc:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <USBD_GetDescriptor+0xb4>)
 8007ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad2:	bf00      	nop
 8007ad4:	08007aed 	.word	0x08007aed
 8007ad8:	08007b21 	.word	0x08007b21
 8007adc:	08007b55 	.word	0x08007b55
 8007ae0:	08007b89 	.word	0x08007b89
 8007ae4:	08007bbd 	.word	0x08007bbd
 8007ae8:	08007bf1 	.word	0x08007bf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	7c12      	ldrb	r2, [r2, #16]
 8007b04:	f107 0108 	add.w	r1, r7, #8
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4798      	blx	r3
 8007b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b0e:	e091      	b.n	8007c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fab2 	bl	800807c <USBD_CtlError>
            err++;
 8007b18:	7afb      	ldrb	r3, [r7, #11]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b1e:	e089      	b.n	8007c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00b      	beq.n	8007b44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	7c12      	ldrb	r2, [r2, #16]
 8007b38:	f107 0108 	add.w	r1, r7, #8
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4798      	blx	r3
 8007b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b42:	e077      	b.n	8007c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fa98 	bl	800807c <USBD_CtlError>
            err++;
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	72fb      	strb	r3, [r7, #11]
          break;
 8007b52:	e06f      	b.n	8007c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00b      	beq.n	8007b78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	7c12      	ldrb	r2, [r2, #16]
 8007b6c:	f107 0108 	add.w	r1, r7, #8
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
 8007b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b76:	e05d      	b.n	8007c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fa7e 	bl	800807c <USBD_CtlError>
            err++;
 8007b80:	7afb      	ldrb	r3, [r7, #11]
 8007b82:	3301      	adds	r3, #1
 8007b84:	72fb      	strb	r3, [r7, #11]
          break;
 8007b86:	e055      	b.n	8007c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	7c12      	ldrb	r2, [r2, #16]
 8007ba0:	f107 0108 	add.w	r1, r7, #8
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007baa:	e043      	b.n	8007c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fa64 	bl	800807c <USBD_CtlError>
            err++;
 8007bb4:	7afb      	ldrb	r3, [r7, #11]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bba:	e03b      	b.n	8007c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7c12      	ldrb	r2, [r2, #16]
 8007bd4:	f107 0108 	add.w	r1, r7, #8
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bde:	e029      	b.n	8007c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa4a 	bl	800807c <USBD_CtlError>
            err++;
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	3301      	adds	r3, #1
 8007bec:	72fb      	strb	r3, [r7, #11]
          break;
 8007bee:	e021      	b.n	8007c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c12:	e00f      	b.n	8007c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fa30 	bl	800807c <USBD_CtlError>
            err++;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	72fb      	strb	r3, [r7, #11]
          break;
 8007c22:	e007      	b.n	8007c34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa28 	bl	800807c <USBD_CtlError>
          err++;
 8007c2c:	7afb      	ldrb	r3, [r7, #11]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007c32:	bf00      	nop
      }
      break;
 8007c34:	e037      	b.n	8007ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	7c1b      	ldrb	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d109      	bne.n	8007c52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c46:	f107 0208 	add.w	r2, r7, #8
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	4798      	blx	r3
 8007c4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c50:	e029      	b.n	8007ca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fa11 	bl	800807c <USBD_CtlError>
        err++;
 8007c5a:	7afb      	ldrb	r3, [r7, #11]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c60:	e021      	b.n	8007ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	7c1b      	ldrb	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10d      	bne.n	8007c86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	f107 0208 	add.w	r2, r7, #8
 8007c76:	4610      	mov	r0, r2
 8007c78:	4798      	blx	r3
 8007c7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	2207      	movs	r2, #7
 8007c82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c84:	e00f      	b.n	8007ca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f9f7 	bl	800807c <USBD_CtlError>
        err++;
 8007c8e:	7afb      	ldrb	r3, [r7, #11]
 8007c90:	3301      	adds	r3, #1
 8007c92:	72fb      	strb	r3, [r7, #11]
      break;
 8007c94:	e007      	b.n	8007ca6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f9ef 	bl	800807c <USBD_CtlError>
      err++;
 8007c9e:	7afb      	ldrb	r3, [r7, #11]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ca4:	bf00      	nop
  }

  if (err != 0U)
 8007ca6:	7afb      	ldrb	r3, [r7, #11]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d11e      	bne.n	8007cea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	88db      	ldrh	r3, [r3, #6]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d016      	beq.n	8007ce2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007cb4:	893b      	ldrh	r3, [r7, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00e      	beq.n	8007cd8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	88da      	ldrh	r2, [r3, #6]
 8007cbe:	893b      	ldrh	r3, [r7, #8]
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	bf28      	it	cs
 8007cc4:	4613      	movcs	r3, r2
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cca:	893b      	ldrh	r3, [r7, #8]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fa44 	bl	800815e <USBD_CtlSendData>
 8007cd6:	e009      	b.n	8007cec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f9ce 	bl	800807c <USBD_CtlError>
 8007ce0:	e004      	b.n	8007cec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa95 	bl	8008212 <USBD_CtlSendStatus>
 8007ce8:	e000      	b.n	8007cec <USBD_GetDescriptor+0x2cc>
    return;
 8007cea:	bf00      	nop
  }
}
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop

08007cf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	889b      	ldrh	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d131      	bne.n	8007d6a <USBD_SetAddress+0x76>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	88db      	ldrh	r3, [r3, #6]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d12d      	bne.n	8007d6a <USBD_SetAddress+0x76>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	885b      	ldrh	r3, [r3, #2]
 8007d12:	2b7f      	cmp	r3, #127	; 0x7f
 8007d14:	d829      	bhi.n	8007d6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	885b      	ldrh	r3, [r3, #2]
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d104      	bne.n	8007d38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f9a3 	bl	800807c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d36:	e01d      	b.n	8007d74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	7bfa      	ldrb	r2, [r7, #15]
 8007d3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 ff23 	bl	8008b90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa61 	bl	8008212 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d004      	beq.n	8007d60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5e:	e009      	b.n	8007d74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d68:	e004      	b.n	8007d74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f985 	bl	800807c <USBD_CtlError>
  }
}
 8007d72:	bf00      	nop
 8007d74:	bf00      	nop
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	885b      	ldrh	r3, [r3, #2]
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	4b4c      	ldr	r3, [pc, #304]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007d92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d94:	4b4b      	ldr	r3, [pc, #300]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d905      	bls.n	8007da8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f96c 	bl	800807c <USBD_CtlError>
    return USBD_FAIL;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e088      	b.n	8007eba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d002      	beq.n	8007dba <USBD_SetConfig+0x3e>
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d025      	beq.n	8007e04 <USBD_SetConfig+0x88>
 8007db8:	e071      	b.n	8007e9e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007dba:	4b42      	ldr	r3, [pc, #264]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01c      	beq.n	8007dfc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007dc2:	4b40      	ldr	r3, [pc, #256]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dcc:	4b3d      	ldr	r3, [pc, #244]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff f948 	bl	8007068 <USBD_SetClassConfig>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d004      	beq.n	8007dec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f949 	bl	800807c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dea:	e065      	b.n	8007eb8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fa10 	bl	8008212 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2203      	movs	r2, #3
 8007df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007dfa:	e05d      	b.n	8007eb8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa08 	bl	8008212 <USBD_CtlSendStatus>
      break;
 8007e02:	e059      	b.n	8007eb8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e04:	4b2f      	ldr	r3, [pc, #188]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d112      	bne.n	8007e32 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007e14:	4b2b      	ldr	r3, [pc, #172]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e1e:	4b29      	ldr	r3, [pc, #164]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff f93b 	bl	80070a0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f9f1 	bl	8008212 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e30:	e042      	b.n	8007eb8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007e32:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d02a      	beq.n	8007e96 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff f929 	bl	80070a0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e4e:	4b1d      	ldr	r3, [pc, #116]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e58:	4b1a      	ldr	r3, [pc, #104]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff f902 	bl	8007068 <USBD_SetClassConfig>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00f      	beq.n	8007e8e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f903 	bl	800807c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff f90e 	bl	80070a0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e8c:	e014      	b.n	8007eb8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9bf 	bl	8008212 <USBD_CtlSendStatus>
      break;
 8007e94:	e010      	b.n	8007eb8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f9bb 	bl	8008212 <USBD_CtlSendStatus>
      break;
 8007e9c:	e00c      	b.n	8007eb8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f8eb 	bl	800807c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ea6:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <USBD_SetConfig+0x148>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff f8f7 	bl	80070a0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb6:	bf00      	nop
  }

  return ret;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	2000019c 	.word	0x2000019c

08007ec8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	88db      	ldrh	r3, [r3, #6]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d004      	beq.n	8007ee4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f8cd 	bl	800807c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ee2:	e023      	b.n	8007f2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	dc02      	bgt.n	8007ef6 <USBD_GetConfig+0x2e>
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dc03      	bgt.n	8007efc <USBD_GetConfig+0x34>
 8007ef4:	e015      	b.n	8007f22 <USBD_GetConfig+0x5a>
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d00b      	beq.n	8007f12 <USBD_GetConfig+0x4a>
 8007efa:	e012      	b.n	8007f22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	3308      	adds	r3, #8
 8007f06:	2201      	movs	r2, #1
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f927 	bl	800815e <USBD_CtlSendData>
        break;
 8007f10:	e00c      	b.n	8007f2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	2201      	movs	r2, #1
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f91f 	bl	800815e <USBD_CtlSendData>
        break;
 8007f20:	e004      	b.n	8007f2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f8a9 	bl	800807c <USBD_CtlError>
        break;
 8007f2a:	bf00      	nop
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d81e      	bhi.n	8007f8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	88db      	ldrh	r3, [r3, #6]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d004      	beq.n	8007f5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f890 	bl	800807c <USBD_CtlError>
        break;
 8007f5c:	e01a      	b.n	8007f94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d005      	beq.n	8007f7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f043 0202 	orr.w	r2, r3, #2
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	330c      	adds	r3, #12
 8007f7e:	2202      	movs	r2, #2
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f8eb 	bl	800815e <USBD_CtlSendData>
      break;
 8007f88:	e004      	b.n	8007f94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f875 	bl	800807c <USBD_CtlError>
      break;
 8007f92:	bf00      	nop
  }
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d106      	bne.n	8007fbc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f92b 	bl	8008212 <USBD_CtlSendStatus>
  }
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d80b      	bhi.n	8007ff4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	885b      	ldrh	r3, [r3, #2]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d10c      	bne.n	8007ffe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f910 	bl	8008212 <USBD_CtlSendStatus>
      }
      break;
 8007ff2:	e004      	b.n	8007ffe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f840 	bl	800807c <USBD_CtlError>
      break;
 8007ffc:	e000      	b.n	8008000 <USBD_ClrFeature+0x3c>
      break;
 8007ffe:	bf00      	nop
  }
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	781a      	ldrb	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3301      	adds	r3, #1
 8008022:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3301      	adds	r3, #1
 8008030:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f7ff fabb 	bl	80075ae <SWAPBYTE>
 8008038:	4603      	mov	r3, r0
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3301      	adds	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7ff faae 	bl	80075ae <SWAPBYTE>
 8008052:	4603      	mov	r3, r0
 8008054:	461a      	mov	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3301      	adds	r3, #1
 800805e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3301      	adds	r3, #1
 8008064:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff faa1 	bl	80075ae <SWAPBYTE>
 800806c:	4603      	mov	r3, r0
 800806e:	461a      	mov	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	80da      	strh	r2, [r3, #6]
}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008086:	2180      	movs	r1, #128	; 0x80
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fd17 	bl	8008abc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800808e:	2100      	movs	r1, #0
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fd13 	bl	8008abc <USBD_LL_StallEP>
}
 8008096:	bf00      	nop
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b086      	sub	sp, #24
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d036      	beq.n	8008122 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80080b8:	6938      	ldr	r0, [r7, #16]
 80080ba:	f000 f836 	bl	800812a <USBD_GetLen>
 80080be:	4603      	mov	r3, r0
 80080c0:	3301      	adds	r3, #1
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	4413      	add	r3, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	7812      	ldrb	r2, [r2, #0]
 80080d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	3301      	adds	r3, #1
 80080dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	4413      	add	r3, r2
 80080e4:	2203      	movs	r2, #3
 80080e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	3301      	adds	r3, #1
 80080ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80080ee:	e013      	b.n	8008118 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	4413      	add	r3, r2
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	7812      	ldrb	r2, [r2, #0]
 80080fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	3301      	adds	r3, #1
 8008100:	613b      	str	r3, [r7, #16]
    idx++;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	3301      	adds	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4413      	add	r3, r2
 800810e:	2200      	movs	r2, #0
 8008110:	701a      	strb	r2, [r3, #0]
    idx++;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	3301      	adds	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e7      	bne.n	80080f0 <USBD_GetString+0x52>
 8008120:	e000      	b.n	8008124 <USBD_GetString+0x86>
    return;
 8008122:	bf00      	nop
  }
}
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800812a:	b480      	push	{r7}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800813a:	e005      	b.n	8008148 <USBD_GetLen+0x1e>
  {
    len++;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	3301      	adds	r3, #1
 8008140:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	3301      	adds	r3, #1
 8008146:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f5      	bne.n	800813c <USBD_GetLen+0x12>
  }

  return len;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2202      	movs	r2, #2
 800816e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	2100      	movs	r1, #0
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fd22 	bl	8008bce <USBD_LL_Transmit>

  return USBD_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 fd11 	bl	8008bce <USBD_LL_Transmit>

  return USBD_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2203      	movs	r2, #3
 80081c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	2100      	movs	r1, #0
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fd15 	bl	8008c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	2100      	movs	r1, #0
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 fd04 	bl	8008c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2204      	movs	r2, #4
 800821e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008222:	2300      	movs	r3, #0
 8008224:	2200      	movs	r2, #0
 8008226:	2100      	movs	r1, #0
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fcd0 	bl	8008bce <USBD_LL_Transmit>

  return USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2205      	movs	r2, #5
 8008244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008248:	2300      	movs	r3, #0
 800824a:	2200      	movs	r2, #0
 800824c:	2100      	movs	r1, #0
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fcde 	bl	8008c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800826e:	2301      	movs	r3, #1
 8008270:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008276:	4b1f      	ldr	r3, [pc, #124]	; (80082f4 <FATFS_LinkDriverEx+0x94>)
 8008278:	7a5b      	ldrb	r3, [r3, #9]
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d131      	bne.n	80082e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008280:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <FATFS_LinkDriverEx+0x94>)
 8008282:	7a5b      	ldrb	r3, [r3, #9]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	461a      	mov	r2, r3
 8008288:	4b1a      	ldr	r3, [pc, #104]	; (80082f4 <FATFS_LinkDriverEx+0x94>)
 800828a:	2100      	movs	r1, #0
 800828c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800828e:	4b19      	ldr	r3, [pc, #100]	; (80082f4 <FATFS_LinkDriverEx+0x94>)
 8008290:	7a5b      	ldrb	r3, [r3, #9]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	4a17      	ldr	r2, [pc, #92]	; (80082f4 <FATFS_LinkDriverEx+0x94>)
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800829e:	4b15      	ldr	r3, [pc, #84]	; (80082f4 <FATFS_LinkDriverEx+0x94>)
 80082a0:	7a5b      	ldrb	r3, [r3, #9]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <FATFS_LinkDriverEx+0x94>)
 80082a8:	4413      	add	r3, r2
 80082aa:	79fa      	ldrb	r2, [r7, #7]
 80082ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80082ae:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <FATFS_LinkDriverEx+0x94>)
 80082b0:	7a5b      	ldrb	r3, [r3, #9]
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	b2d1      	uxtb	r1, r2
 80082b8:	4a0e      	ldr	r2, [pc, #56]	; (80082f4 <FATFS_LinkDriverEx+0x94>)
 80082ba:	7251      	strb	r1, [r2, #9]
 80082bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80082be:	7dbb      	ldrb	r3, [r7, #22]
 80082c0:	3330      	adds	r3, #48	; 0x30
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3301      	adds	r3, #1
 80082cc:	223a      	movs	r2, #58	; 0x3a
 80082ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	3302      	adds	r3, #2
 80082d4:	222f      	movs	r2, #47	; 0x2f
 80082d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	3303      	adds	r3, #3
 80082dc:	2200      	movs	r2, #0
 80082de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	200001a0 	.word	0x200001a0

080082f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008302:	2200      	movs	r2, #0
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff ffaa 	bl	8008260 <FATFS_LinkDriverEx>
 800830c:	4603      	mov	r3, r0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800831c:	2200      	movs	r2, #0
 800831e:	4912      	ldr	r1, [pc, #72]	; (8008368 <MX_USB_DEVICE_Init+0x50>)
 8008320:	4812      	ldr	r0, [pc, #72]	; (800836c <MX_USB_DEVICE_Init+0x54>)
 8008322:	f7fe fe33 	bl	8006f8c <USBD_Init>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800832c:	f7f8 fa80 	bl	8000830 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008330:	490f      	ldr	r1, [pc, #60]	; (8008370 <MX_USB_DEVICE_Init+0x58>)
 8008332:	480e      	ldr	r0, [pc, #56]	; (800836c <MX_USB_DEVICE_Init+0x54>)
 8008334:	f7fe fe5a 	bl	8006fec <USBD_RegisterClass>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800833e:	f7f8 fa77 	bl	8000830 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008342:	490c      	ldr	r1, [pc, #48]	; (8008374 <MX_USB_DEVICE_Init+0x5c>)
 8008344:	4809      	ldr	r0, [pc, #36]	; (800836c <MX_USB_DEVICE_Init+0x54>)
 8008346:	f7fe fdab 	bl	8006ea0 <USBD_CDC_RegisterInterface>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008350:	f7f8 fa6e 	bl	8000830 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008354:	4805      	ldr	r0, [pc, #20]	; (800836c <MX_USB_DEVICE_Init+0x54>)
 8008356:	f7fe fe70 	bl	800703a <USBD_Start>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008360:	f7f8 fa66 	bl	8000830 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008364:	bf00      	nop
 8008366:	bd80      	pop	{r7, pc}
 8008368:	20000130 	.word	0x20000130
 800836c:	20000968 	.word	0x20000968
 8008370:	20000018 	.word	0x20000018
 8008374:	2000011c 	.word	0x2000011c

08008378 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800837c:	2200      	movs	r2, #0
 800837e:	4905      	ldr	r1, [pc, #20]	; (8008394 <CDC_Init_FS+0x1c>)
 8008380:	4805      	ldr	r0, [pc, #20]	; (8008398 <CDC_Init_FS+0x20>)
 8008382:	f7fe fda2 	bl	8006eca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008386:	4905      	ldr	r1, [pc, #20]	; (800839c <CDC_Init_FS+0x24>)
 8008388:	4803      	ldr	r0, [pc, #12]	; (8008398 <CDC_Init_FS+0x20>)
 800838a:	f7fe fdbc 	bl	8006f06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800838e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008390:	4618      	mov	r0, r3
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20001438 	.word	0x20001438
 8008398:	20000968 	.word	0x20000968
 800839c:	20000c38 	.word	0x20000c38

080083a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	6039      	str	r1, [r7, #0]
 80083ba:	71fb      	strb	r3, [r7, #7]
 80083bc:	4613      	mov	r3, r2
 80083be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	2b23      	cmp	r3, #35	; 0x23
 80083c4:	d84a      	bhi.n	800845c <CDC_Control_FS+0xac>
 80083c6:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <CDC_Control_FS+0x1c>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	0800845d 	.word	0x0800845d
 80083d0:	0800845d 	.word	0x0800845d
 80083d4:	0800845d 	.word	0x0800845d
 80083d8:	0800845d 	.word	0x0800845d
 80083dc:	0800845d 	.word	0x0800845d
 80083e0:	0800845d 	.word	0x0800845d
 80083e4:	0800845d 	.word	0x0800845d
 80083e8:	0800845d 	.word	0x0800845d
 80083ec:	0800845d 	.word	0x0800845d
 80083f0:	0800845d 	.word	0x0800845d
 80083f4:	0800845d 	.word	0x0800845d
 80083f8:	0800845d 	.word	0x0800845d
 80083fc:	0800845d 	.word	0x0800845d
 8008400:	0800845d 	.word	0x0800845d
 8008404:	0800845d 	.word	0x0800845d
 8008408:	0800845d 	.word	0x0800845d
 800840c:	0800845d 	.word	0x0800845d
 8008410:	0800845d 	.word	0x0800845d
 8008414:	0800845d 	.word	0x0800845d
 8008418:	0800845d 	.word	0x0800845d
 800841c:	0800845d 	.word	0x0800845d
 8008420:	0800845d 	.word	0x0800845d
 8008424:	0800845d 	.word	0x0800845d
 8008428:	0800845d 	.word	0x0800845d
 800842c:	0800845d 	.word	0x0800845d
 8008430:	0800845d 	.word	0x0800845d
 8008434:	0800845d 	.word	0x0800845d
 8008438:	0800845d 	.word	0x0800845d
 800843c:	0800845d 	.word	0x0800845d
 8008440:	0800845d 	.word	0x0800845d
 8008444:	0800845d 	.word	0x0800845d
 8008448:	0800845d 	.word	0x0800845d
 800844c:	0800845d 	.word	0x0800845d
 8008450:	0800845d 	.word	0x0800845d
 8008454:	0800845d 	.word	0x0800845d
 8008458:	0800845d 	.word	0x0800845d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800845c:	bf00      	nop
  }

  return (USBD_OK);
 800845e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	4805      	ldr	r0, [pc, #20]	; (8008490 <CDC_Receive_FS+0x24>)
 800847a:	f7fe fd44 	bl	8006f06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800847e:	4804      	ldr	r0, [pc, #16]	; (8008490 <CDC_Receive_FS+0x24>)
 8008480:	f7fe fd5a 	bl	8006f38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008484:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000968 	.word	0x20000968

08008494 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2212      	movs	r2, #18
 80084c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084ca:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	2000014c 	.word	0x2000014c

080084dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	6039      	str	r1, [r7, #0]
 80084e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2204      	movs	r2, #4
 80084ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084ee:	4b03      	ldr	r3, [pc, #12]	; (80084fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	20000160 	.word	0x20000160

08008500 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	6039      	str	r1, [r7, #0]
 800850a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d105      	bne.n	800851e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	4907      	ldr	r1, [pc, #28]	; (8008534 <USBD_FS_ProductStrDescriptor+0x34>)
 8008516:	4808      	ldr	r0, [pc, #32]	; (8008538 <USBD_FS_ProductStrDescriptor+0x38>)
 8008518:	f7ff fdc1 	bl	800809e <USBD_GetString>
 800851c:	e004      	b.n	8008528 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	4904      	ldr	r1, [pc, #16]	; (8008534 <USBD_FS_ProductStrDescriptor+0x34>)
 8008522:	4805      	ldr	r0, [pc, #20]	; (8008538 <USBD_FS_ProductStrDescriptor+0x38>)
 8008524:	f7ff fdbb 	bl	800809e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008528:	4b02      	ldr	r3, [pc, #8]	; (8008534 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20001c38 	.word	0x20001c38
 8008538:	08008d70 	.word	0x08008d70

0800853c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	6039      	str	r1, [r7, #0]
 8008546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	4904      	ldr	r1, [pc, #16]	; (800855c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800854c:	4804      	ldr	r0, [pc, #16]	; (8008560 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800854e:	f7ff fda6 	bl	800809e <USBD_GetString>
  return USBD_StrDesc;
 8008552:	4b02      	ldr	r3, [pc, #8]	; (800855c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20001c38 	.word	0x20001c38
 8008560:	08008d80 	.word	0x08008d80

08008564 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	6039      	str	r1, [r7, #0]
 800856e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	221a      	movs	r2, #26
 8008574:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008576:	f000 f843 	bl	8008600 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800857a:	4b02      	ldr	r3, [pc, #8]	; (8008584 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000164 	.word	0x20000164

08008588 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	4603      	mov	r3, r0
 8008590:	6039      	str	r1, [r7, #0]
 8008592:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d105      	bne.n	80085a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	4907      	ldr	r1, [pc, #28]	; (80085bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800859e:	4808      	ldr	r0, [pc, #32]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085a0:	f7ff fd7d 	bl	800809e <USBD_GetString>
 80085a4:	e004      	b.n	80085b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4904      	ldr	r1, [pc, #16]	; (80085bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80085aa:	4805      	ldr	r0, [pc, #20]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085ac:	f7ff fd77 	bl	800809e <USBD_GetString>
  }
  return USBD_StrDesc;
 80085b0:	4b02      	ldr	r3, [pc, #8]	; (80085bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20001c38 	.word	0x20001c38
 80085c0:	08008d94 	.word	0x08008d94

080085c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d105      	bne.n	80085e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	4907      	ldr	r1, [pc, #28]	; (80085f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085da:	4808      	ldr	r0, [pc, #32]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085dc:	f7ff fd5f 	bl	800809e <USBD_GetString>
 80085e0:	e004      	b.n	80085ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	4904      	ldr	r1, [pc, #16]	; (80085f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085e6:	4805      	ldr	r0, [pc, #20]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085e8:	f7ff fd59 	bl	800809e <USBD_GetString>
  }
  return USBD_StrDesc;
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20001c38 	.word	0x20001c38
 80085fc:	08008da0 	.word	0x08008da0

08008600 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008606:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <Get_SerialNum+0x44>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800860c:	4b0e      	ldr	r3, [pc, #56]	; (8008648 <Get_SerialNum+0x48>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008612:	4b0e      	ldr	r3, [pc, #56]	; (800864c <Get_SerialNum+0x4c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d009      	beq.n	800863a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008626:	2208      	movs	r2, #8
 8008628:	4909      	ldr	r1, [pc, #36]	; (8008650 <Get_SerialNum+0x50>)
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 f814 	bl	8008658 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008630:	2204      	movs	r2, #4
 8008632:	4908      	ldr	r1, [pc, #32]	; (8008654 <Get_SerialNum+0x54>)
 8008634:	68b8      	ldr	r0, [r7, #8]
 8008636:	f000 f80f 	bl	8008658 <IntToUnicode>
  }
}
 800863a:	bf00      	nop
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	1fff7a10 	.word	0x1fff7a10
 8008648:	1fff7a14 	.word	0x1fff7a14
 800864c:	1fff7a18 	.word	0x1fff7a18
 8008650:	20000166 	.word	0x20000166
 8008654:	20000176 	.word	0x20000176

08008658 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	4613      	mov	r3, r2
 8008664:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800866a:	2300      	movs	r3, #0
 800866c:	75fb      	strb	r3, [r7, #23]
 800866e:	e027      	b.n	80086c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	0f1b      	lsrs	r3, r3, #28
 8008674:	2b09      	cmp	r3, #9
 8008676:	d80b      	bhi.n	8008690 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	0f1b      	lsrs	r3, r3, #28
 800867c:	b2da      	uxtb	r2, r3
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	4619      	mov	r1, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	440b      	add	r3, r1
 8008688:	3230      	adds	r2, #48	; 0x30
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	e00a      	b.n	80086a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	0f1b      	lsrs	r3, r3, #28
 8008694:	b2da      	uxtb	r2, r3
 8008696:	7dfb      	ldrb	r3, [r7, #23]
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	4619      	mov	r1, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	440b      	add	r3, r1
 80086a0:	3237      	adds	r2, #55	; 0x37
 80086a2:	b2d2      	uxtb	r2, r2
 80086a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	3301      	adds	r3, #1
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	4413      	add	r3, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	3301      	adds	r3, #1
 80086be:	75fb      	strb	r3, [r7, #23]
 80086c0:	7dfa      	ldrb	r2, [r7, #23]
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d3d3      	bcc.n	8008670 <IntToUnicode+0x18>
  }
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
	...

080086d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	; 0x28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086e0:	f107 0314 	add.w	r3, r7, #20
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	605a      	str	r2, [r3, #4]
 80086ea:	609a      	str	r2, [r3, #8]
 80086ec:	60da      	str	r2, [r3, #12]
 80086ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086f8:	d13a      	bne.n	8008770 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086fa:	2300      	movs	r3, #0
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	4b1e      	ldr	r3, [pc, #120]	; (8008778 <HAL_PCD_MspInit+0xa0>)
 8008700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008702:	4a1d      	ldr	r2, [pc, #116]	; (8008778 <HAL_PCD_MspInit+0xa0>)
 8008704:	f043 0301 	orr.w	r3, r3, #1
 8008708:	6313      	str	r3, [r2, #48]	; 0x30
 800870a:	4b1b      	ldr	r3, [pc, #108]	; (8008778 <HAL_PCD_MspInit+0xa0>)
 800870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	613b      	str	r3, [r7, #16]
 8008714:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008716:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800871a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800871c:	2302      	movs	r3, #2
 800871e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008720:	2300      	movs	r3, #0
 8008722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008724:	2303      	movs	r3, #3
 8008726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008728:	230a      	movs	r3, #10
 800872a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800872c:	f107 0314 	add.w	r3, r7, #20
 8008730:	4619      	mov	r1, r3
 8008732:	4812      	ldr	r0, [pc, #72]	; (800877c <HAL_PCD_MspInit+0xa4>)
 8008734:	f7f8 fbba 	bl	8000eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008738:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <HAL_PCD_MspInit+0xa0>)
 800873a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873c:	4a0e      	ldr	r2, [pc, #56]	; (8008778 <HAL_PCD_MspInit+0xa0>)
 800873e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008742:	6353      	str	r3, [r2, #52]	; 0x34
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <HAL_PCD_MspInit+0xa0>)
 800874a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874c:	4a0a      	ldr	r2, [pc, #40]	; (8008778 <HAL_PCD_MspInit+0xa0>)
 800874e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008752:	6453      	str	r3, [r2, #68]	; 0x44
 8008754:	4b08      	ldr	r3, [pc, #32]	; (8008778 <HAL_PCD_MspInit+0xa0>)
 8008756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008760:	2200      	movs	r2, #0
 8008762:	2100      	movs	r1, #0
 8008764:	2043      	movs	r0, #67	; 0x43
 8008766:	f7f8 fb6a 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800876a:	2043      	movs	r0, #67	; 0x43
 800876c:	f7f8 fb83 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008770:	bf00      	nop
 8008772:	3728      	adds	r7, #40	; 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	40023800 	.word	0x40023800
 800877c:	40020000 	.word	0x40020000

08008780 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008794:	4619      	mov	r1, r3
 8008796:	4610      	mov	r0, r2
 8008798:	f7fe fc9a 	bl	80070d0 <USBD_LL_SetupStage>
}
 800879c:	bf00      	nop
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80087b6:	78fa      	ldrb	r2, [r7, #3]
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	4613      	mov	r3, r2
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	4619      	mov	r1, r3
 80087ce:	f7fe fcd4 	bl	800717a <USBD_LL_DataOutStage>
}
 80087d2:	bf00      	nop
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80087ec:	78fa      	ldrb	r2, [r7, #3]
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	4613      	mov	r3, r2
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	1a9b      	subs	r3, r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	440b      	add	r3, r1
 80087fa:	3348      	adds	r3, #72	; 0x48
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	78fb      	ldrb	r3, [r7, #3]
 8008800:	4619      	mov	r1, r3
 8008802:	f7fe fd1d 	bl	8007240 <USBD_LL_DataInStage>
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fe31 	bl	8007484 <USBD_LL_SOF>
}
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008832:	2301      	movs	r3, #1
 8008834:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
 8008842:	e008      	b.n	8008856 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d102      	bne.n	8008852 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800884c:	2301      	movs	r3, #1
 800884e:	73fb      	strb	r3, [r7, #15]
 8008850:	e001      	b.n	8008856 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008852:	f7f7 ffed 	bl	8000830 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800885c:	7bfa      	ldrb	r2, [r7, #15]
 800885e:	4611      	mov	r1, r2
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fdd1 	bl	8007408 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe fd7d 	bl	800736c <USBD_LL_Reset>
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe fdcc 	bl	8007428 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6812      	ldr	r2, [r2, #0]
 800889e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088a2:	f043 0301 	orr.w	r3, r3, #1
 80088a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088b0:	4b04      	ldr	r3, [pc, #16]	; (80088c4 <HAL_PCD_SuspendCallback+0x48>)
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	4a03      	ldr	r2, [pc, #12]	; (80088c4 <HAL_PCD_SuspendCallback+0x48>)
 80088b6:	f043 0306 	orr.w	r3, r3, #6
 80088ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	e000ed00 	.word	0xe000ed00

080088c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fdbc 	bl	8007454 <USBD_LL_Resume>
}
 80088dc:	bf00      	nop
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088f6:	78fa      	ldrb	r2, [r7, #3]
 80088f8:	4611      	mov	r1, r2
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fe0a 	bl	8007514 <USBD_LL_IsoOUTIncomplete>
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe fdd2 	bl	80074c8 <USBD_LL_IsoINIncomplete>
}
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fe10 	bl	8007560 <USBD_LL_DevConnected>
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fe0d 	bl	8007576 <USBD_LL_DevDisconnected>
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d13c      	bne.n	80089ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008974:	4a20      	ldr	r2, [pc, #128]	; (80089f8 <USBD_LL_Init+0x94>)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a1e      	ldr	r2, [pc, #120]	; (80089f8 <USBD_LL_Init+0x94>)
 8008980:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008984:	4b1c      	ldr	r3, [pc, #112]	; (80089f8 <USBD_LL_Init+0x94>)
 8008986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800898a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800898c:	4b1a      	ldr	r3, [pc, #104]	; (80089f8 <USBD_LL_Init+0x94>)
 800898e:	2204      	movs	r2, #4
 8008990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008992:	4b19      	ldr	r3, [pc, #100]	; (80089f8 <USBD_LL_Init+0x94>)
 8008994:	2202      	movs	r2, #2
 8008996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008998:	4b17      	ldr	r3, [pc, #92]	; (80089f8 <USBD_LL_Init+0x94>)
 800899a:	2200      	movs	r2, #0
 800899c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800899e:	4b16      	ldr	r3, [pc, #88]	; (80089f8 <USBD_LL_Init+0x94>)
 80089a0:	2202      	movs	r2, #2
 80089a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089a4:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <USBD_LL_Init+0x94>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089aa:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <USBD_LL_Init+0x94>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80089b0:	4b11      	ldr	r3, [pc, #68]	; (80089f8 <USBD_LL_Init+0x94>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80089b6:	4b10      	ldr	r3, [pc, #64]	; (80089f8 <USBD_LL_Init+0x94>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80089bc:	4b0e      	ldr	r3, [pc, #56]	; (80089f8 <USBD_LL_Init+0x94>)
 80089be:	2200      	movs	r2, #0
 80089c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80089c2:	480d      	ldr	r0, [pc, #52]	; (80089f8 <USBD_LL_Init+0x94>)
 80089c4:	f7f8 fd6c 	bl	80014a0 <HAL_PCD_Init>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80089ce:	f7f7 ff2f 	bl	8000830 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80089d2:	2180      	movs	r1, #128	; 0x80
 80089d4:	4808      	ldr	r0, [pc, #32]	; (80089f8 <USBD_LL_Init+0x94>)
 80089d6:	f7f9 feca 	bl	800276e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089da:	2240      	movs	r2, #64	; 0x40
 80089dc:	2100      	movs	r1, #0
 80089de:	4806      	ldr	r0, [pc, #24]	; (80089f8 <USBD_LL_Init+0x94>)
 80089e0:	f7f9 fe7e 	bl	80026e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089e4:	2280      	movs	r2, #128	; 0x80
 80089e6:	2101      	movs	r1, #1
 80089e8:	4803      	ldr	r0, [pc, #12]	; (80089f8 <USBD_LL_Init+0x94>)
 80089ea:	f7f9 fe79 	bl	80026e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20001e38 	.word	0x20001e38

080089fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f8 fe61 	bl	80016da <HAL_PCD_Start>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f942 	bl	8008ca8 <USBD_Get_USB_Status>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	4608      	mov	r0, r1
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4603      	mov	r3, r0
 8008a42:	70fb      	strb	r3, [r7, #3]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70bb      	strb	r3, [r7, #2]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a5a:	78bb      	ldrb	r3, [r7, #2]
 8008a5c:	883a      	ldrh	r2, [r7, #0]
 8008a5e:	78f9      	ldrb	r1, [r7, #3]
 8008a60:	f7f9 fa45 	bl	8001eee <HAL_PCD_EP_Open>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f91c 	bl	8008ca8 <USBD_Get_USB_Status>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7f9 fa8e 	bl	8001fbe <HAL_PCD_EP_Close>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f8fd 	bl	8008ca8 <USBD_Get_USB_Status>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ad6:	78fa      	ldrb	r2, [r7, #3]
 8008ad8:	4611      	mov	r1, r2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7f9 fb66 	bl	80021ac <HAL_PCD_EP_SetStall>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f8de 	bl	8008ca8 <USBD_Get_USB_Status>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b14:	78fa      	ldrb	r2, [r7, #3]
 8008b16:	4611      	mov	r1, r2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7f9 fbab 	bl	8002274 <HAL_PCD_EP_ClrStall>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 f8bf 	bl	8008ca8 <USBD_Get_USB_Status>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	da0b      	bge.n	8008b6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b5a:	68f9      	ldr	r1, [r7, #12]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	440b      	add	r3, r1
 8008b66:	333e      	adds	r3, #62	; 0x3e
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	e00b      	b.n	8008b84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b72:	68f9      	ldr	r1, [r7, #12]
 8008b74:	4613      	mov	r3, r2
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	1a9b      	subs	r3, r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	440b      	add	r3, r1
 8008b7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008baa:	78fa      	ldrb	r2, [r7, #3]
 8008bac:	4611      	mov	r1, r2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7f9 f978 	bl	8001ea4 <HAL_PCD_SetAddress>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 f874 	bl	8008ca8 <USBD_Get_USB_Status>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b086      	sub	sp, #24
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bec:	7af9      	ldrb	r1, [r7, #11]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	f7f9 fa91 	bl	8002118 <HAL_PCD_EP_Transmit>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 f853 	bl	8008ca8 <USBD_Get_USB_Status>
 8008c02:	4603      	mov	r3, r0
 8008c04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c06:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	607a      	str	r2, [r7, #4]
 8008c1a:	603b      	str	r3, [r7, #0]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c2e:	7af9      	ldrb	r1, [r7, #11]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	f7f9 fa0d 	bl	8002052 <HAL_PCD_EP_Receive>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c3c:	7dfb      	ldrb	r3, [r7, #23]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 f832 	bl	8008ca8 <USBD_Get_USB_Status>
 8008c44:	4603      	mov	r3, r0
 8008c46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c48:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c64:	78fa      	ldrb	r2, [r7, #3]
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7f9 fa3d 	bl	80020e8 <HAL_PCD_EP_GetRxCount>
 8008c6e:	4603      	mov	r3, r0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c80:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <USBD_static_malloc+0x18>)
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	200001ac 	.word	0x200001ac

08008c94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]

}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d817      	bhi.n	8008cec <USBD_Get_USB_Status+0x44>
 8008cbc:	a201      	add	r2, pc, #4	; (adr r2, 8008cc4 <USBD_Get_USB_Status+0x1c>)
 8008cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc2:	bf00      	nop
 8008cc4:	08008cd5 	.word	0x08008cd5
 8008cc8:	08008cdb 	.word	0x08008cdb
 8008ccc:	08008ce1 	.word	0x08008ce1
 8008cd0:	08008ce7 	.word	0x08008ce7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd8:	e00b      	b.n	8008cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cde:	e008      	b.n	8008cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce4:	e005      	b.n	8008cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cea:	e002      	b.n	8008cf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cec:	2303      	movs	r3, #3
 8008cee:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf0:	bf00      	nop
  }
  return usb_status;
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <__libc_init_array>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	4d0d      	ldr	r5, [pc, #52]	; (8008d38 <__libc_init_array+0x38>)
 8008d04:	4c0d      	ldr	r4, [pc, #52]	; (8008d3c <__libc_init_array+0x3c>)
 8008d06:	1b64      	subs	r4, r4, r5
 8008d08:	10a4      	asrs	r4, r4, #2
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	42a6      	cmp	r6, r4
 8008d0e:	d109      	bne.n	8008d24 <__libc_init_array+0x24>
 8008d10:	4d0b      	ldr	r5, [pc, #44]	; (8008d40 <__libc_init_array+0x40>)
 8008d12:	4c0c      	ldr	r4, [pc, #48]	; (8008d44 <__libc_init_array+0x44>)
 8008d14:	f000 f820 	bl	8008d58 <_init>
 8008d18:	1b64      	subs	r4, r4, r5
 8008d1a:	10a4      	asrs	r4, r4, #2
 8008d1c:	2600      	movs	r6, #0
 8008d1e:	42a6      	cmp	r6, r4
 8008d20:	d105      	bne.n	8008d2e <__libc_init_array+0x2e>
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d28:	4798      	blx	r3
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	e7ee      	b.n	8008d0c <__libc_init_array+0xc>
 8008d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d32:	4798      	blx	r3
 8008d34:	3601      	adds	r6, #1
 8008d36:	e7f2      	b.n	8008d1e <__libc_init_array+0x1e>
 8008d38:	08008de4 	.word	0x08008de4
 8008d3c:	08008de4 	.word	0x08008de4
 8008d40:	08008de4 	.word	0x08008de4
 8008d44:	08008de8 	.word	0x08008de8

08008d48 <memset>:
 8008d48:	4402      	add	r2, r0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d100      	bne.n	8008d52 <memset+0xa>
 8008d50:	4770      	bx	lr
 8008d52:	f803 1b01 	strb.w	r1, [r3], #1
 8008d56:	e7f9      	b.n	8008d4c <memset+0x4>

08008d58 <_init>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	bf00      	nop
 8008d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5e:	bc08      	pop	{r3}
 8008d60:	469e      	mov	lr, r3
 8008d62:	4770      	bx	lr

08008d64 <_fini>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr
